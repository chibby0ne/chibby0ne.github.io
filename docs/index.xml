<?xml-stylesheet href="/rss.xsl" type="text/xsl"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Murmurations of Neurons</title><link>https://www.antoniojgutierrez.com/</link><description>Recent content on Murmurations of Neurons</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>Antonio Gutierrez 2015-2021. CC-BY-NC 4.0</copyright><lastBuildDate>Mon, 20 Jun 2022 00:28:23 +0200</lastBuildDate><atom:link href="https://www.antoniojgutierrez.com/index.xml" rel="self" type="application/rss+xml"/><item><title>What is xmalloc?</title><link>https://www.antoniojgutierrez.com/posts/2022-06-08-what_is_xmalloc/</link><pubDate>Mon, 20 Jun 2022 00:28:23 +0200</pubDate><guid>https://www.antoniojgutierrez.com/posts/2022-06-08-what_is_xmalloc/</guid><description>Murmurations of Neurons https://www.antoniojgutierrez.com/posts/2022-06-08-what_is_xmalloc/ -&lt;h2 id="what-is-it-what-does-it-do">What is it? What does it do?&lt;/h2>
&lt;p>xmalloc is a non-standard function that wraps &lt;code>malloc&lt;/code> and &lt;em>&lt;strong>terminates the
program if malloc fails to the allocate&lt;/strong>&lt;/em> the requested memory.&lt;/p>
&lt;p>I was running some of the examples in &lt;a href="https://jvns.ca/blog/2017/07/05/linux-tracing-systems/">bork&amp;rsquo;s linux tracing
post&lt;/a>, and noticed
that when running the uprobe example:&lt;/p>
&lt;pre>&lt;code>sudo ./bin/uprobe 'r:bash:readline +0($retval):string'
&lt;/code>&lt;/pre>&lt;p>it returned an error:&lt;/p>
&lt;pre>&lt;code>ERROR: missing symbol &amp;quot;malloc&amp;quot; in /usr/bin/bash
&lt;/code>&lt;/pre>&lt;p>which was odd but perhaps that version of bash used by bork was indeed using
&lt;code>malloc&lt;/code> and current versions of bash used a different &lt;strong>flavor&lt;/strong> of it, like
&lt;code>calloc&lt;/code>, &lt;code>realloc&lt;/code>, etc&amp;hellip;&lt;/p>
&lt;p>So I queried the binary for the string &lt;code>malloc&lt;/code> and grepped the output:&lt;/p>
&lt;pre>&lt;code>strings /bin/bash | grep malloc
&lt;/code>&lt;/pre>&lt;p>And got:&lt;/p>
&lt;pre>&lt;code>xmalloc
malloc_trace_at_exit
xmalloc
&lt;/code>&lt;/pre>&lt;h2 id="down-the-rabbithole">Down the rabbithole&lt;/h2>
&lt;p>Which led me to this article on the &lt;a href="https://www.gnu.org/software/libc/manual/html_node/Malloc-Examples.html">xmalloc
convention&lt;/a>.&lt;/p>
&lt;p>In addition there&amp;rsquo;s a quite interesting discussion on the usage of &lt;code>xmalloc&lt;/code> vs
&lt;code>malloc&lt;/code> in &lt;a href="https://stackoverflow.com/a/7590738">SO&lt;/a>&lt;/p>
&lt;h2 id="when-to-use-it">When to use it?&lt;/h2>
&lt;p>The gist of it is that if you&amp;rsquo;re writing library code, you shouldn&amp;rsquo;t use
&lt;code>xmalloc&lt;/code> since applications depending on that library might lose work or
information since they cannot gracefully shutdown.&lt;/p>
&lt;p>Though there are cases where it&amp;rsquo;s not necessary (and &amp;ldquo;pollutes the codebase&amp;rdquo;)
to check for the return code of malloc for example writing a user-end
application, and considering the kernel&amp;rsquo;s memory overcommitment behavior being
as it, xmalloc could be an alright choice.&lt;/p>
&lt;p>TIL!&lt;/p>
- https://www.antoniojgutierrez.com/posts/2022-06-08-what_is_xmalloc/ - Antonio Gutierrez 2015-2021. CC-BY-NC 4.0</description></item><item><title>Set a custom machine name in Vagrant</title><link>https://www.antoniojgutierrez.com/posts/2022-06-19-change_vagrant_machine_name_from_command_line/</link><pubDate>Fri, 10 Jun 2022 01:17:07 +0200</pubDate><guid>https://www.antoniojgutierrez.com/posts/2022-06-19-change_vagrant_machine_name_from_command_line/</guid><description>Murmurations of Neurons https://www.antoniojgutierrez.com/posts/2022-06-19-change_vagrant_machine_name_from_command_line/ -&lt;p>This is something took me a while to found out since it is documented but not
as straight forward as &amp;ldquo;setting a custom machine name&amp;rdquo;, but instead is a kind
of wanted side effect of using &lt;a href="https://www.vagrantup.com/docs/multi-machine">multi-machine
setup&lt;/a>. But I&amp;rsquo;m getting ahead of
myself. Let&amp;rsquo;s start with a quick review of what is Vagrant&lt;/p>
&lt;h2 id="what-is-vagrant">What is Vagrant&lt;/h2>
&lt;p>Vagrant is a virtual machine (VM) provisioning tool that allows us to enjoy
&amp;ldquo;Development Environment as Code&amp;rdquo; by configuring and managing VMs. It can
interface with so called &amp;ldquo;providers&amp;rdquo; such as Virtualbox, KVM, VMWare, Docker
containers, etc.
It does so by storing all the configuration in a &lt;code>Vagrantfile&lt;/code> whose syntax is
regular is that of a regular ruby file where we specify the memory allocated,
cores allocated, provider used, provisioning, etc&amp;hellip;&lt;/p>
&lt;p>It uses a concept of &amp;ldquo;Box&amp;rdquo; which are the initial image to clone from and that
are fetched from Vagrant Cloud. Anyone can push images, although the most
downloaded ones are the ones coming from Hashicorp or known distros. You can
think of Boxes kind of like the equivalent of the images used in the &lt;code>FROM&lt;/code>
directives in a Dockerfile, and Vagrant Cloud as Docker Hub. In Docker, the
images are then customized by copying files to it and provisioning by
installing additional packages.&lt;/p>
&lt;p>In the case of Vagrant machines, we don&amp;rsquo;t usually copy files as much as we
mount a directory from our local machine into the VM.&lt;/p>
&lt;p>It&amp;rsquo;s used by developers and operators to share reproducible virtual
environments which are stored as code as part of the project&amp;rsquo;s repository.
Pretty nifty!&lt;/p>
&lt;h2 id="typical-vagrant-workflow">Typical Vagrant Workflow&lt;/h2>
&lt;p>A typical workflow looks like this:&lt;/p>
&lt;pre>&lt;code>$ mkdir -p ~/Projects/vagrant_experiments/archlinux; cd !$
$ vagrant init arhclinux/archlinux
A `Vagrantfile` has been placed in this directory. You are now
ready to `vagrant up` your first virtual environment! Please read
the comments in the Vagrantfile as well as documentation on
`vagrantup.com` for more information on using Vagrant.
&lt;/code>&lt;/pre>&lt;p>This then creates this &lt;code>Vagrantfile&lt;/code> in the current working directory, with
the contents:&lt;/p>
&lt;pre>&lt;code>Vagrant.configure(&amp;quot;2&amp;quot;) do |config|
config.vm.box = &amp;quot;archlinux/archlinux&amp;quot;
end
&lt;/code>&lt;/pre>&lt;p>As you can see the initial box of the VM an &lt;code>archlinux&lt;/code>.&lt;/p>
&lt;p>If we run &lt;code>vagrant up&lt;/code> it starts and provisions the vagrant environment, and
by will output something like this:&lt;/p>
&lt;pre>&lt;code>$ vagrant up
Bringing machine 'default' up with 'virtualbox' provider...
==&amp;gt; default: Importing base box 'archlinux/archlinux'...
==&amp;gt; default: Matching MAC address for NAT networking...
==&amp;gt; default: Checking if box 'archlinux/archlinux' version '20210415.20050' is up to date...
==&amp;gt; default: A newer version of the box 'archlinux/archlinux' for provider 'virtualbox' is
==&amp;gt; default: available! You currently have version '20210415.20050'. The latest is version
==&amp;gt; default: '20220615.61815'. Run `vagrant box update` to update.
==&amp;gt; default: Setting the name of the VM: archlinux_default_1655671732047_63504
==&amp;gt; default: Clearing any previously set network interfaces...
==&amp;gt; default: Preparing network interfaces based on configuration...
default: Adapter 1: nat
==&amp;gt; default: Forwarding ports...
default: 22 (guest) =&amp;gt; 2222 (host) (adapter 1)
==&amp;gt; default: Booting VM...
==&amp;gt; default: Waiting for machine to boot. This may take a few minutes...
default: SSH address: 127.0.0.1:2222
default: SSH username: vagrant
default: SSH auth method: private key
default:
default: Vagrant insecure key detected. Vagrant will automatically replace
default: this with a newly generated keypair for better security.
default:
default: Inserting generated public key within guest...
default: Removing insecure key from the guest if it's present...
default: Key inserted! Disconnecting and reconnecting using new SSH key...
==&amp;gt; default: Machine booted and ready!
==&amp;gt; default: Checking for guest additions in VM...
==&amp;gt; default: Mounting shared folders...
default: /vagrant =&amp;gt; /home/chibby0ne/Projects/vagrant_experiments/archlinux
&lt;/code>&lt;/pre>&lt;p>The output informs us that it created a VM using virtualbox, started the VM,
started a SSH daemon on the VM and created a pair of ssh key which is used for
ssh&amp;rsquo;ing to the VM, and finally that it mounted the local directory into
&lt;code>/vagrant&lt;/code>.&lt;/p>
&lt;p>It additionally mentioned that the VM name will be: &lt;code>archlinux_default_1655671732047_63504&lt;/code>&lt;/p>
&lt;p>In this line:&lt;/p>
&lt;pre>&lt;code>==&amp;gt; default: Setting the name of the VM: archlinux_default_1655671732047_63504
&lt;/code>&lt;/pre>&lt;p>We can check all the environment and machines for the current user to see if
that name appears:&lt;/p>
&lt;pre>&lt;code>$ vagrant global-status
id name provider state directory
---------------------------------------------------------------------------------------------
c9924b8 default virtualbox running /home/chibby0ne/Projects/vagrant_experiments/archlinux
The above shows information about all known Vagrant environments
on this machine. This data is cached and may not be completely
up-to-date (use &amp;quot;vagrant global-status --prune&amp;quot; to prune invalid
entries). To interact with any of the machines, you can go to that
directory and run Vagrant, or you can use the ID directly with
Vagrant commands from any directory. For example:
&amp;quot;vagrant destroy 1a2b3c4d&amp;quot;
&lt;/code>&lt;/pre>&lt;p>So the name is actually &lt;code>default&lt;/code> according to Vagrant. So where is the
&lt;code>archlinux_default_1655671732047_63504&lt;/code> it mentioned before?&lt;/p>
&lt;p>Here&amp;rsquo;s the caveat: This command shows us the id and the name associated to
that ID of the vagrant machines. The name shown was the one used by the
provisioner to created the VM itself, in this case Virtualbox.&lt;/p>
&lt;p>We can verify this by running:&lt;/p>
&lt;pre>&lt;code>$ VBoxManage list vms
&amp;quot;archlinux_default_1655671732047_63504&amp;quot; {1d8fc426-36bc-4035-a7a8-c76e1cf16128}
&lt;/code>&lt;/pre>&lt;p>So the name of the VM in Virtualbox is
&lt;code>archlinux_default_1655671732047_63504&lt;/code>, but the name of the machine is
&lt;code>default&lt;/code>.&lt;/p>
&lt;h2 id="so-how-do-we-set-the-machine-name">So how do we set the machine name?&lt;/h2>
&lt;p>As hinted in the beginning in the case of Multi-Machines, this entails
managing multiple guest machines per Vagrantfile. That&amp;rsquo;s the thing, &lt;strong>the
simple default case in vagrant is to manage a single machine per Vagrantfile&lt;/strong>.
You can see from the output of the &lt;code>global-status&lt;/code> command that it also
associates a path to the machine, but by default they are all named &lt;code>default&lt;/code>.&lt;/p>
&lt;p>To define a custom name we need to a another &amp;ldquo;define&amp;rdquo; section to the &lt;code>Vagrantfile&lt;/code>.&lt;/p>
&lt;pre>&lt;code>Vagrant.configure(&amp;quot;2&amp;quot;) do |config|
config.vm.define &amp;quot;arch&amp;quot; do |arch|
arch.vm.box = &amp;quot;archlinux/archlinux&amp;quot;
end
&lt;/code>&lt;/pre>&lt;p>Here we define machine name as &amp;ldquo;arch&amp;rdquo; and try to run &lt;code>vagrant up&lt;/code>:&lt;/p>
&lt;pre>&lt;code>Bringing machine 'arch' up with 'virtualbox' provider...
==&amp;gt; arch: Importing base box 'archlinux/archlinux'...
==&amp;gt; arch: Matching MAC address for NAT networking...
==&amp;gt; arch: Checking if box 'archlinux/archlinux' version '20210415.20050' is up to date...
==&amp;gt; arch: Setting the name of the VM: archlinux_arch_1655673970260_47411
==&amp;gt; arch: Fixed port collision for 22 =&amp;gt; 2222. Now on port 2200.
==&amp;gt; arch: Clearing any previously set network interfaces...
==&amp;gt; arch: Preparing network interfaces based on configuration...
arch: Adapter 1: nat
==&amp;gt; arch: Forwarding ports...
arch: 22 (guest) =&amp;gt; 2200 (host) (adapter 1)
==&amp;gt; arch: Booting VM...
==&amp;gt; arch: Waiting for machine to boot. This may take a few minutes...
arch: SSH address: 127.0.0.1:2200
arch: SSH username: vagrant
arch: SSH auth method: private key
arch: Inserting generated public key within guest...
arch: Removing insecure key from the guest if it's present...
arch: Key inserted! Disconnecting and reconnecting using new SSH key...
==&amp;gt; arch: Machine booted and ready!
==&amp;gt; arch: Checking for guest additions in VM...
==&amp;gt; arch: Mounting shared folders...
arch: /vagrant =&amp;gt; /home/chibby0ne/Projects/vagrant_experiments/archlinux
&lt;/code>&lt;/pre>&lt;p>So the first line told us that it was bringing machine &amp;ldquo;arch&amp;rdquo; up. That&amp;rsquo;s what
we want: &lt;em>machine&lt;/em> name&lt;/p>
&lt;p>And if we check the environments now we can see:&lt;/p>
&lt;pre>&lt;code>$ vagrant global-status
id name provider state directory
---------------------------------------------------------------------------------------------
c9924b8 default virtualbox running /home/chibby0ne/Projects/vagrant_experiments/archlinux
6201c41 arch virtualbox running /home/chibby0ne/Projects/vagrant_experiments/archlinux
The above shows information about all known Vagrant environments
on this machine. This data is cached and may not be completely
up-to-date (use &amp;quot;vagrant global-status --prune&amp;quot; to prune invalid
entries). To interact with any of the machines, you can go to that
directory and run Vagrant, or you can use the ID directly with
Vagrant commands from any directory. For example:
&amp;quot;vagrant destroy 1a2b3c4d&amp;quot;
&lt;/code>&lt;/pre>&lt;p>We can see the &amp;ldquo;arch&amp;rdquo; machine now.&lt;/p>
&lt;h2 id="reality-check">Reality check&lt;/h2>
&lt;p>The reality of having custom-named machines, besides having a better and
easier time at disambiguating which machine which is running from a &lt;code>vagrant status&lt;/code> point of view, is that it&amp;rsquo;s of little utility (outside of
multi-machine setups, in which case I&amp;rsquo;d say it&amp;rsquo;s actually necessary), for two
reasons:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>For a single Vagrantfile with a single machine defined you can only have
running machine.&lt;/p>
&lt;p>If we check the status of the directory after running the second &lt;code>vagrant up&lt;/code> with the &lt;code>arch&lt;/code> machine, we will see that &lt;code>arch&lt;/code> is running whilst the
&lt;code>default&lt;/code> was halted.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;pre>&lt;code>$ vagrant status
Current machine states:
arch running (virtualbox)
&lt;/code>&lt;/pre>&lt;ul>
&lt;li>As hinted before, vagrant will always disambiguate machines by directory.
In order words, you cannot start or halt a machine from a directory where
the Vagrantfile defines a different machine, i.e: you know which machine
you&amp;rsquo;re interfacing with because of the directory you&amp;rsquo;re currently in.&lt;/li>
&lt;/ul>
&lt;p>That said it does add a bit of order and neatness to the environments, and
doesn&amp;rsquo;t hurt at all since it&amp;rsquo;s just 2 extra lines to the Vagrantfile.&lt;/p>
&lt;p>That&amp;rsquo;s it! Quick and hopefully somewhat useful tip!&lt;/p>
- https://www.antoniojgutierrez.com/posts/2022-06-19-change_vagrant_machine_name_from_command_line/ - Antonio Gutierrez 2015-2021. CC-BY-NC 4.0</description></item><item><title>Defining installation location in build systems</title><link>https://www.antoniojgutierrez.com/posts/2021-05-23-difference_between_prefix_destir_in_build_systems/</link><pubDate>Sun, 23 May 2021 20:16:34 +0200</pubDate><guid>https://www.antoniojgutierrez.com/posts/2021-05-23-difference_between_prefix_destir_in_build_systems/</guid><description>Murmurations of Neurons https://www.antoniojgutierrez.com/posts/2021-05-23-difference_between_prefix_destir_in_build_systems/ -&lt;p>There&amp;rsquo;s always a way to change the default installation location in every
build system, and fortunately it&amp;rsquo;s almost always the same naming convention
used to change them.&lt;/p>
&lt;p>The way to change the installation directory is usually through these
variables: &lt;code>DESTDIR&lt;/code> and &lt;code>PREFIX&lt;/code>.&lt;/p>
&lt;p>The exact purpose of each, is not exactly clear from the name, and since you&amp;rsquo;d
only change set if you&amp;rsquo;re doing a custom installation building from source
(which is not very common) it&amp;rsquo;s been a common source of confusion.&lt;/p>
&lt;p>But as everything, once we read the manual and run an example, it&amp;rsquo;s clear what
the distinction is between them and which one to use at any one time.&lt;/p>
&lt;h2 id="autotools-gnu-build-system">Autotools (GNU Build System)&lt;/h2>
&lt;p>To that end let&amp;rsquo;s illustrate with an example in Autotools. Autotools (or
formally &lt;em>GNU Build System&lt;/em>) being the oldest and (in my opinion) the most
cumbersome to use (slow, complicated, hard to debug):&lt;/p>
&lt;p>Let&amp;rsquo;s take a simpler version of the example shown in the &lt;a href="https://www.gnu.org/software/automake/manual/html_node/Creating-amhello.html">documentation of
autotools&lt;/a>:&lt;/p>
&lt;p>In summary, we need to create 4 files (&lt;code>src/main.c&lt;/code>, &lt;code>src/Makefile.am&lt;/code>,
&lt;code>Makefile.am&lt;/code>, &lt;code>configure.ac&lt;/code>) which you can create by executing the shell
commands posted here, with the help of heredocs.&lt;/p>
&lt;ol>
&lt;li>Create the directory structure:&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ mkdir ~/amhello/src
$ &lt;span style="color:#658b00">cd&lt;/span> ~/amhello
&lt;/code>&lt;/pre>&lt;/div>&lt;ol start="2">
&lt;li>Source file&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ cat &lt;span style="color:#cd5555">&amp;lt;&amp;lt;EOF &amp;gt; src/main.c
&lt;/span>&lt;span style="color:#cd5555">#include &amp;lt;config.h&amp;gt;
&lt;/span>&lt;span style="color:#cd5555">#include &amp;lt;stdio.h&amp;gt;
&lt;/span>&lt;span style="color:#cd5555">
&lt;/span>&lt;span style="color:#cd5555">int
&lt;/span>&lt;span style="color:#cd5555">main (void)
&lt;/span>&lt;span style="color:#cd5555">{
&lt;/span>&lt;span style="color:#cd5555"> puts (&amp;#34;Hello World!&amp;#34;);
&lt;/span>&lt;span style="color:#cd5555"> puts (&amp;#34;This is &amp;#34; PACKAGE_STRING &amp;#34;.&amp;#34;);
&lt;/span>&lt;span style="color:#cd5555"> return 0;
&lt;/span>&lt;span style="color:#cd5555">}
&lt;/span>&lt;span style="color:#cd5555">EOF&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;ol start="3">
&lt;li>Automake instruction to generate the binary:&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ cat &lt;span style="color:#cd5555">&amp;lt;&amp;lt;EOF &amp;gt; src/Makefile.am
&lt;/span>&lt;span style="color:#cd5555">bin_PROGRAMS = hello
&lt;/span>&lt;span style="color:#cd5555">hello_SOURCES = main.c
&lt;/span>&lt;span style="color:#cd5555">EOF&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;ol start="3">
&lt;li>Automake instruction for this directory:&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ cat &lt;span style="color:#cd5555">&amp;lt;&amp;lt;EOF &amp;gt; Makefile.am
&lt;/span>&lt;span style="color:#cd5555">SUBDIRS = src
&lt;/span>&lt;span style="color:#cd5555">EOF&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;ol start="4">
&lt;li>Autoconf instructions to create the &lt;code>configure&lt;/code> script:&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">cat &lt;span style="color:#cd5555">&amp;lt;&amp;lt;EOF &amp;gt; configure.ac
&lt;/span>&lt;span style="color:#cd5555">AC_INIT([amhello], [1.0], [bug-automake@gnu.org])
&lt;/span>&lt;span style="color:#cd5555">AM_INIT_AUTOMAKE([-Wall -Werror foreign])
&lt;/span>&lt;span style="color:#cd5555">AC_PROG_CC
&lt;/span>&lt;span style="color:#cd5555">AC_CONFIG_HEADERS([config.h])
&lt;/span>&lt;span style="color:#cd5555">AC_CONFIG_FILES([
&lt;/span>&lt;span style="color:#cd5555"> Makefile
&lt;/span>&lt;span style="color:#cd5555"> src/Makefile
&lt;/span>&lt;span style="color:#cd5555">])
&lt;/span>&lt;span style="color:#cd5555">AC_OUTPUT
&lt;/span>&lt;span style="color:#cd5555">EOF&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Now let&amp;rsquo;s generate the &lt;code>GNU Build System&lt;/code> files:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ autoreconf --install
configure.ac:3: installing &lt;span style="color:#cd5555">&amp;#39;./compile&amp;#39;&lt;/span>
configure.ac:2: installing &lt;span style="color:#cd5555">&amp;#39;./install-sh&amp;#39;&lt;/span>
configure.ac:2: installing &lt;span style="color:#cd5555">&amp;#39;./missing&amp;#39;&lt;/span>
src/Makefile.am: installing &lt;span style="color:#cd5555">&amp;#39;./depcomp&amp;#39;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Your directory should now look like this:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">.
├── aclocal.m4
├── autom4te.cache
│   ├── output.0
│   ├── output.1
│   ├── output.2
│   ├── requests
│   ├── traces.0
│   ├── traces.1
│   └── traces.2
├── compile
├── config.h.in
├── configure
├── configure.ac
├── depcomp
├── install-sh
├── Makefile.am
├── Makefile.in
├── missing
└── src
├── main.c
├── Makefile.am
└── Makefile.in
&lt;/code>&lt;/pre>&lt;/div>&lt;p>The usual flow for Autotools based systems is: &lt;code>configure&lt;/code>, &lt;code>make&lt;/code>, &lt;code>make install&lt;/code>.&lt;/p>
&lt;p>So let&amp;rsquo;s start with &lt;code>configure&lt;/code> which checks the host systems
characteristics and creates the Makefiles needed to build the program.&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ ./configure
checking &lt;span style="color:#8b008b;font-weight:bold">for&lt;/span> a BSD-compatible install... /usr/bin/install -c
checking whether build environment is sane... yes
checking &lt;span style="color:#8b008b;font-weight:bold">for&lt;/span> a race-free mkdir -p... /usr/bin/mkdir -p
checking &lt;span style="color:#8b008b;font-weight:bold">for&lt;/span> gawk... gawk
checking whether make sets &lt;span style="color:#8b008b;font-weight:bold">$(&lt;/span>MAKE&lt;span style="color:#8b008b;font-weight:bold">)&lt;/span>... yes
checking whether make supports nested variables... yes
checking &lt;span style="color:#8b008b;font-weight:bold">for&lt;/span> gcc... gcc
checking whether the C compiler works... yes
checking &lt;span style="color:#8b008b;font-weight:bold">for&lt;/span> C compiler default output file name... a.out
checking &lt;span style="color:#8b008b;font-weight:bold">for&lt;/span> suffix of executables...
checking whether we are cross compiling... no
checking &lt;span style="color:#8b008b;font-weight:bold">for&lt;/span> suffix of object files... o
checking whether the compiler supports GNU C... yes
checking whether gcc accepts -g... yes
checking &lt;span style="color:#8b008b;font-weight:bold">for&lt;/span> gcc option to &lt;span style="color:#658b00">enable&lt;/span> C11 features... none needed
checking whether gcc understands -c and -o together... yes
checking whether make supports the include directive... yes (GNU style)
checking dependency style of gcc... gcc3
checking that generated files are newer than configure... &lt;span style="color:#8b008b;font-weight:bold">done&lt;/span>
configure: creating ./config.status
config.status: creating Makefile
config.status: creating src/Makefile
config.status: creating config.h
config.status: executing depfiles commands
&lt;/code>&lt;/pre>&lt;/div>&lt;p>You can see from the output that it checks for compilers and features of the
current host.&lt;/p>
&lt;p>If there was any issue with the configuration of the build system with your
host system, such as missing dependencies, &lt;code>configure&lt;/code> would have failed
preventing you to continue to build the program. In our example this shouldn&amp;rsquo;t
happen but when building from source this is the place where you would usually
find the error messages informing of a missing/not found dependency.&lt;/p>
&lt;p>After &lt;code>configure&lt;/code> succeeds we can build the program by executing &lt;code>make&lt;/code>, which
builds the binary:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ make
make all-recursive
make[1]: Entering directory &lt;span style="color:#cd5555">&amp;#39;/home/chimp/experiments_in_building_stuff/amhello&amp;#39;&lt;/span>
Making all in src
make[2]: Entering directory &lt;span style="color:#cd5555">&amp;#39;/home/chimp/experiments_in_building_stuff/amhello/src&amp;#39;&lt;/span>
gcc -DHAVE_CONFIG_H -I. -I.. -g -O2 -MT main.o -MD -MP -MF .deps/main.Tpo -c -o main.o main.c
mv -f .deps/main.Tpo .deps/main.Po
gcc -g -O2 -o hello main.o
make[2]: Leaving directory &lt;span style="color:#cd5555">&amp;#39;/home/chimp/experiments_in_building_stuff/amhello/src&amp;#39;&lt;/span>
make[2]: Entering directory &lt;span style="color:#cd5555">&amp;#39;/home/chimp/experiments_in_building_stuff/amhello&amp;#39;&lt;/span>
make[2]: Leaving directory &lt;span style="color:#cd5555">&amp;#39;/home/chimp/experiments_in_building_stuff/amhello&amp;#39;&lt;/span>
make[1]: Leaving directory &lt;span style="color:#cd5555">&amp;#39;/home/chimp/experiments_in_building_stuff/amhello&amp;#39;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>At this point the binary &lt;code>hello&lt;/code> is in the &lt;code>src&lt;/code> directory, and all that is
missing is installing this somewhere in the system. That&amp;rsquo;s what the &lt;code>make install&lt;/code> does, so let&amp;rsquo;s run it:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ make install
Making install in src
make[1]: Entering directory &lt;span style="color:#cd5555">&amp;#39;/home/chimp/experiments_in_building_stuff/amhello/src&amp;#39;&lt;/span>
make[2]: Entering directory &lt;span style="color:#cd5555">&amp;#39;/home/chimp/experiments_in_building_stuff/amhello/src&amp;#39;&lt;/span>
/usr/bin/mkdir -p &lt;span style="color:#cd5555">&amp;#39;/usr/local/bin&amp;#39;&lt;/span>
/usr/bin/install -c hello &lt;span style="color:#cd5555">&amp;#39;/usr/local/bin&amp;#39;&lt;/span>
/usr/bin/install: cannot create regular file &lt;span style="color:#cd5555">&amp;#39;/usr/local/bin/hello&amp;#39;&lt;/span>: Permission denied
make[2]: *** [Makefile:283: install-binPROGRAMS] Error &lt;span style="color:#b452cd">1&lt;/span>
make[2]: Leaving directory &lt;span style="color:#cd5555">&amp;#39;/home/chimp/experiments_in_building_stuff/amhello/src&amp;#39;&lt;/span>
make[1]: *** [Makefile:454: install-am] Error &lt;span style="color:#b452cd">2&lt;/span>
make[1]: Leaving directory &lt;span style="color:#cd5555">&amp;#39;/home/chimp/experiments_in_building_stuff/amhello/src&amp;#39;&lt;/span>
make: *** [Makefile:350: install-recursive] Error &lt;span style="color:#b452cd">1&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>As we can see, by default &lt;code>make install&lt;/code> tries to install the binary in
&lt;code>/usr/local/bin&lt;/code>, but fails because I invoked the command as a regular user
and not with superuser rights, and therefore it fails to write to
&lt;code>/usr/local/bin&lt;/code> due to &amp;ldquo;permission denied&amp;rdquo;. More generally, &lt;code>make install&lt;/code> by
default install to &lt;code>/usr/local&lt;/code> and then to one of: &lt;code>doc/&lt;/code>, &lt;code>lib/&lt;/code> and/or
&lt;code>bin&lt;/code> depending of whether it is installing documentation (e.g: man pages), a
library, or a binary respectively.&lt;/p>
&lt;p>Here&amp;rsquo;s where the &lt;code>DESTDIR&lt;/code> could be used, so let&amp;rsquo;s try to run make install
with a directory in somewhere else:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ make install &lt;span style="color:#00688b">DESTDIR&lt;/span>=/tmp/installdir
Making install in src
make[1]: Entering directory &lt;span style="color:#cd5555">&amp;#39;/home/chimp/experiments_in_building_stuff/amhello/src&amp;#39;&lt;/span>
make[2]: Entering directory &lt;span style="color:#cd5555">&amp;#39;/home/chimp/experiments_in_building_stuff/amhello/src&amp;#39;&lt;/span>
/usr/bin/mkdir -p &lt;span style="color:#cd5555">&amp;#39;/tmp/installdir/usr/local/bin&amp;#39;&lt;/span>
/usr/bin/install -c hello &lt;span style="color:#cd5555">&amp;#39;/tmp/installdir/usr/local/bin&amp;#39;&lt;/span>
make[2]: Nothing to be &lt;span style="color:#8b008b;font-weight:bold">done&lt;/span> &lt;span style="color:#8b008b;font-weight:bold">for&lt;/span> &lt;span style="color:#cd5555">&amp;#39;install-data-am&amp;#39;&lt;/span>.
make[2]: Leaving directory &lt;span style="color:#cd5555">&amp;#39;/home/chimp/experiments_in_building_stuff/amhello/src&amp;#39;&lt;/span>
make[1]: Leaving directory &lt;span style="color:#cd5555">&amp;#39;/home/chimp/experiments_in_building_stuff/amhello/src&amp;#39;&lt;/span>
make[1]: Entering directory &lt;span style="color:#cd5555">&amp;#39;/home/chimp/experiments_in_building_stuff/amhello&amp;#39;&lt;/span>
make[2]: Entering directory &lt;span style="color:#cd5555">&amp;#39;/home/chimp/experiments_in_building_stuff/amhello&amp;#39;&lt;/span>
make[2]: Nothing to be &lt;span style="color:#8b008b;font-weight:bold">done&lt;/span> &lt;span style="color:#8b008b;font-weight:bold">for&lt;/span> &lt;span style="color:#cd5555">&amp;#39;install-exec-am&amp;#39;&lt;/span>.
make[2]: Nothing to be &lt;span style="color:#8b008b;font-weight:bold">done&lt;/span> &lt;span style="color:#8b008b;font-weight:bold">for&lt;/span> &lt;span style="color:#cd5555">&amp;#39;install-data-am&amp;#39;&lt;/span>.
make[2]: Leaving directory &lt;span style="color:#cd5555">&amp;#39;/home/chimp/experiments_in_building_stuff/amhello&amp;#39;&lt;/span>
make[1]: Leaving directory &lt;span style="color:#cd5555">&amp;#39;/home/chimp/experiments_in_building_stuff/amhello&amp;#39;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Ah! So it installed the binary to the &lt;code>DESTDIR&lt;/code> given but not exactly there.
When we list the files there we find:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">/tmp/installdir
└── usr
└── &lt;span style="color:#658b00">local&lt;/span>
└── bin
└── hello
&lt;/code>&lt;/pre>&lt;/div>&lt;p>So &lt;code>DESTDIR&lt;/code> changed the destination directory but it still created the
&lt;code>/usr/local/bin&lt;/code> in which it tried to install by default!&lt;/p>
&lt;p>Basically &lt;em>&lt;strong>DESTDIR gave us a way to check what and how something would be
installed without actually installing it&lt;/strong>&lt;/em>! In fact if we look at &lt;a href="https://www.gnu.org/software/automake/manual/html_node/DESTDIR.html">the
documentation&lt;/a>
the documentation that&amp;rsquo;s pretty much what it says:&lt;/p>
&lt;blockquote>
&lt;p>The DESTDIR variable can be used to perform a staged installation. The
package should be configured as if it was going to be installed in its final
location (e.g., &amp;ndash;prefix /usr), but when running make install, the DESTDIR
should be set to the absolute name of a directory into which the
installation will be diverted. From this directory it is easy to review
which files are being installed where, and finally copy them to their final
location by some means.&lt;/p>
&lt;/blockquote>
&lt;p>This snippet also hints as to what prefix does! *Prefix describes the
beginning (or prefix) of the absolute path used as installation directory!
Another difference is &lt;strong>that prefix is set when running the &lt;code>configure&lt;/code> script&lt;/strong>.&lt;/p>
&lt;p>To illustrate that let&amp;rsquo;s set prefix to &lt;code>boo&lt;/code> by rerunning &lt;code>./configure&lt;/code>,
&lt;code>make&lt;/code> and &lt;code>make install&lt;/code>. We don&amp;rsquo;t need to clean the directory before we do
so:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ ./configure --prefix=boo
configure: error: expected an absolute directory name &lt;span style="color:#8b008b;font-weight:bold">for&lt;/span> --prefix: boo
&lt;/code>&lt;/pre>&lt;/div>&lt;blockquote>
&lt;p>You can see there&amp;rsquo;s a bit of inconsistency in between setting these
variables. That&amp;rsquo;s because configure is a script and the script handles options
the regular Unix way with double dash. Whilst Makefiles use variables which
are usually uppercase and don&amp;rsquo;t use the double dash.&lt;/p>
&lt;/blockquote>
&lt;p>As mentioned before, &lt;strong>prefix is an absolute path&lt;/strong> therefore the first
character &lt;strong>must be a forward slash (/)&lt;/strong>.&lt;/p>
&lt;p>For the sake of brevity I will omit the output of the commands except when
needed:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ ./configure --prefix=boo
$ make
$ make install
Making install in src
make[1]: Entering directory &lt;span style="color:#cd5555">&amp;#39;/home/chimp/experiments_in_building_stuff/amhello/src&amp;#39;&lt;/span>
make[2]: Entering directory &lt;span style="color:#cd5555">&amp;#39;/home/chimp/experiments_in_building_stuff/amhello/src&amp;#39;&lt;/span>
/usr/bin/mkdir -p &lt;span style="color:#cd5555">&amp;#39;/boo/bin&amp;#39;&lt;/span>
/usr/bin/mkdir: cannot create directory ‘/boo’: Permission denied
make[2]: *** [Makefile:283: install-binPROGRAMS] Error &lt;span style="color:#b452cd">1&lt;/span>
make[2]: Leaving directory &lt;span style="color:#cd5555">&amp;#39;/home/chimp/experiments_in_building_stuff/amhello/src&amp;#39;&lt;/span>
make[1]: *** [Makefile:454: install-am] Error &lt;span style="color:#b452cd">2&lt;/span>
make[1]: Leaving directory &lt;span style="color:#cd5555">&amp;#39;/home/chimp/experiments_in_building_stuff/amhello/src&amp;#39;&lt;/span>
make: *** [Makefile:350: install-recursive] Error &lt;span style="color:#b452cd">1&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>As can be seen, make tried to install the binary in &lt;code>/boo/bin&lt;/code> so the prefix
is indeed the beginning of the install path.&lt;/p>
&lt;h2 id="cmake">CMake&lt;/h2>
&lt;p>&lt;code>DESTDIR&lt;/code> is a CMake environment variable, therefore its initial value comes
from the environment of the calling process. Documentation can be seen
&lt;a href="https://cmake.org/cmake/help/latest/envvar/DESTDIR.html">here&lt;/a>&lt;/p>
&lt;p>It can be set by either exporting it or setting it in the same line cmake is
invoked:&lt;/p>
&lt;p>// Some example here of using destdir and its output&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">&lt;/code>&lt;/pre>&lt;/div>&lt;p>On the other hand the prefix can be set by setting the variable
&lt;code>CMAKE_INSTALL_PREFIX&lt;/code>.&lt;/p>
&lt;p>// Some example here of using &lt;code>CMAKE_INSTALL_PREFIX&lt;/code> and its output&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">&lt;/code>&lt;/pre>&lt;/div>&lt;p>NOTE: &lt;code>CMAKE_INSTALL_PREFIX&lt;/code> is also added to &lt;code>CMAKE_SYSTEM_PREFIX_PATH&lt;/code>
which is used in calls to &lt;code>find_package&lt;/code>, &lt;code>find_program&lt;/code>, &lt;code>find_library&lt;/code> and
others. Check the
&lt;a href="https://cmake.org/cmake/help/latest/variable/CMAKE_INSTALL_PREFIX.html">documentation&lt;/a>
for more information.&lt;/p>
&lt;h2 id="meson">Meson&lt;/h2>
&lt;p>Meson uses &lt;code>DESTDIR&lt;/code> and &lt;code>MESON_INSTALL_PREFIX&lt;/code> as environment variables which
can be set in order to customize the installation directory.&lt;/p>
&lt;p>An additional caveat, is that to be able to install something using meson, the
target first needs to be defined as installable, like so:&lt;/p>
&lt;p>// Some example here of using &lt;code>DESTDIR&lt;/code> and its output&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">executable(&lt;span style="color:#cd5555">&amp;#39;prog&amp;#39;&lt;/span>, &lt;span style="color:#cd5555">&amp;#39;prog.c&amp;#39;&lt;/span>, install : &lt;span style="color:#658b00">true&lt;/span>)
&lt;/code>&lt;/pre>&lt;/div>&lt;p>// Some example here of using &lt;code>MESON_INSTALL_PREFIX&lt;/code> and its output&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">&lt;/code>&lt;/pre>&lt;/div>&lt;p>In addition to that, meson allows a further fine grained customization of
the installation directory for a given target by setting the &lt;code>install_dir&lt;/code>,
which would be equivalent to &lt;code>DESTDIR&lt;/code>.&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">executable(&lt;span style="color:#cd5555">&amp;#39;prog&amp;#39;&lt;/span>, &lt;span style="color:#cd5555">&amp;#39;prog.c&amp;#39;&lt;/span>, install : true, install_dir : &lt;span style="color:#cd5555">&amp;#39;my/special/dir&amp;#39;&lt;/span>)
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;a href="https://mesonbuild.com/Installing.html#installing">Installing&lt;/a>
&lt;a href="https://mesonbuild.com/Installing.html#destdir-support">DESTDIR&lt;/a>&lt;/p>
&lt;h2 id="summary">Summary&lt;/h2>
&lt;p>For changing the installation directory directories in common for a given
software package&amp;rsquo;s files (i.e: documentation, libraries, sources, binaries,
etc..), use &lt;code>PREFIX&lt;/code>.&lt;/p>
&lt;p>For changing where the installation directory is use &lt;code>DESTDIR&lt;/code>.&lt;/p>
&lt;p>Hope this helps!&lt;/p>
- https://www.antoniojgutierrez.com/posts/2021-05-23-difference_between_prefix_destir_in_build_systems/ - Antonio Gutierrez 2015-2021. CC-BY-NC 4.0</description></item><item><title>Short and Long Options with Go flag standard package</title><link>https://www.antoniojgutierrez.com/posts/2021-05-14-short-and-long-options-in-go-flags-pkg/</link><pubDate>Fri, 14 May 2021 02:18:25 +0200</pubDate><guid>https://www.antoniojgutierrez.com/posts/2021-05-14-short-and-long-options-in-go-flags-pkg/</guid><description>Murmurations of Neurons https://www.antoniojgutierrez.com/posts/2021-05-14-short-and-long-options-in-go-flags-pkg/ -&lt;p>Recently I was browsing the awesome
&lt;a href="https://github.com/FiloSottile/age">age&lt;/a> (which I encourage everyone to
look at and use if you haven&amp;rsquo;t already), and noticed something that I had
always mistakenly assumed wasn&amp;rsquo;t possible with the Go standard library.&lt;/p>
&lt;blockquote>
&lt;p>Is it possible to have short &lt;em>and&lt;/em> long options using just the &lt;code>flag&lt;/code> package?&lt;/p>
&lt;/blockquote>
&lt;p>Apparently it is possible!&lt;/p>
&lt;p>To give a little more context, the short options are those that start
with a single dash (&lt;code>-&lt;/code>) and consist of a single letter, e.g: for most
command line argument to set verbose mode you&amp;rsquo;d use: &lt;code>-v&lt;/code>.
In contrast, the long options are those that start with double dash &lt;code>--&lt;/code> and
consist of a word e.g: to use the same example of verbose mode that would be
&lt;code>--verbose&lt;/code>.&lt;/p>
&lt;p>In order to find this out let&amp;rsquo;s first write small program that uses the &lt;code>flag&lt;/code>
package and discover how the invocation of them change the output:&lt;/p>
&lt;p>First let&amp;rsquo;s create a directory where to put the program and initialize the
go.mod:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-sh" data-lang="sh">$ mkdir -p ~/go_experiments/using_flag
$ &lt;span style="color:#658b00">cd&lt;/span> !$
$ go mod init github.com/chibby0ne/&lt;span style="color:#8b008b;font-weight:bold">$(&lt;/span>basename &lt;span style="color:#8b008b;font-weight:bold">$(&lt;/span>&lt;span style="color:#658b00">pwd&lt;/span>&lt;span style="color:#8b008b;font-weight:bold">))&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>This creates a directory &lt;code>using_flag&lt;/code> inside a &lt;code>go_experiments&lt;/code>
directory located in your home directory and initializes a go mod with the
organization/user name &lt;code>chibby0ne&lt;/code> (my username) and repository name the same
as the directory name (&lt;code>using_flag&lt;/code>). Of course you can use your Github
username, but since this is just for experimentation it doesn&amp;rsquo;t really matter
the organization/username or module name you choose.&lt;/p>
&lt;ul>
&lt;li>&lt;em>The &lt;code>!$&lt;/code> used in the second line is a shortcut to refer to the last argument of the last command. Pretty neat huh? You can check more about it in the &lt;a href="https://linux.die.net/man/1/bash">man pages of bash looking into history expansion&lt;/a>&lt;/em>&lt;/li>
&lt;/ul>
&lt;p>Now copy the following code in and write it to a &lt;code>main.go&lt;/code> file, and build it
with &lt;code>go build&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#8b008b;font-weight:bold">package&lt;/span> main
&lt;span style="color:#8b008b;font-weight:bold">import&lt;/span> (
&lt;span style="color:#cd5555">&amp;#34;fmt&amp;#34;&lt;/span>
&lt;span style="color:#cd5555">&amp;#34;flag&amp;#34;&lt;/span>
)
&lt;span style="color:#8b008b;font-weight:bold">func&lt;/span> &lt;span style="color:#008b45">main&lt;/span>() {
&lt;span style="color:#8b008b;font-weight:bold">var&lt;/span> verbose &lt;span style="color:#00688b;font-weight:bold">bool&lt;/span>
flag.&lt;span style="color:#008b45">BoolVar&lt;/span>(&amp;amp;verbose, &lt;span style="color:#cd5555">&amp;#34;verbose&amp;#34;&lt;/span>, &lt;span style="color:#8b008b;font-weight:bold">false&lt;/span>, &lt;span style="color:#cd5555">&amp;#34;verbose output&amp;#34;&lt;/span>)
flag.&lt;span style="color:#008b45">Parse&lt;/span>()
&lt;span style="color:#8b008b;font-weight:bold">if&lt;/span> verbose {
fmt.&lt;span style="color:#008b45">Println&lt;/span>(&lt;span style="color:#cd5555">&amp;#34;verbose is on&amp;#34;&lt;/span>)
}
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>This program should write: &lt;code>verbose is on&lt;/code> to stdout whenever the &lt;code>verbose&lt;/code> flag
is set, otherwise it shouldn&amp;rsquo;t print anything.&lt;/p>
&lt;p>Let&amp;rsquo;s see the output with only no flag:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-sh" data-lang="sh">$ ./using_flag
$
&lt;/code>&lt;/pre>&lt;/div>&lt;p>No output as expected.&lt;/p>
&lt;p>Let&amp;rsquo;s see the output with only one dash (as usually done):&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-sh" data-lang="sh">$ ./using_flag -verbose
verbose is on
$
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Now let&amp;rsquo;s see the output with &lt;em>two&lt;/em> dashes:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-sh" data-lang="sh">$ ./using_flag --verbose
verbose is on
$
&lt;/code>&lt;/pre>&lt;/div>&lt;p>As you can see the &lt;code>flag&lt;/code> package allows this usage with double dash or long
option format but its usage is not &lt;em>&amp;ldquo;well documented&amp;rdquo;&lt;/em> in the package
documentation.&lt;/p>
&lt;p>Why is this the case?&lt;/p>
&lt;p>Let&amp;rsquo;s dig into what happens when we set a &lt;code>BoolVar&lt;/code> (which is the case for any
XVar where &lt;em>X&lt;/em> is any type). All the source code shown corresponds to &lt;strong>go version
go1.16.4 linux/amd64&lt;/strong>:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#228b22">// BoolVar defines a bool flag with specified name, default value, and usage string.
&lt;/span>&lt;span style="color:#228b22">// The argument p points to a bool variable in which to store the value of the flag.
&lt;/span>&lt;span style="color:#228b22">&lt;/span>&lt;span style="color:#8b008b;font-weight:bold">func&lt;/span> &lt;span style="color:#008b45">BoolVar&lt;/span>(p *&lt;span style="color:#00688b;font-weight:bold">bool&lt;/span>, name &lt;span style="color:#00688b;font-weight:bold">string&lt;/span>, value &lt;span style="color:#00688b;font-weight:bold">bool&lt;/span>, usage &lt;span style="color:#00688b;font-weight:bold">string&lt;/span>) {
CommandLine.&lt;span style="color:#008b45">Var&lt;/span>(&lt;span style="color:#008b45">newBoolValue&lt;/span>(value, p), name, usage)
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Let&amp;rsquo;s decompose the magic out of this one liner:&lt;/p>
&lt;ol>
&lt;li>What does &lt;code>newBoolValue&lt;/code> do?&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#228b22">// -- bool Value
&lt;/span>&lt;span style="color:#228b22">&lt;/span>&lt;span style="color:#8b008b;font-weight:bold">type&lt;/span> boolValue &lt;span style="color:#00688b;font-weight:bold">bool&lt;/span>
&lt;span style="color:#8b008b;font-weight:bold">func&lt;/span> &lt;span style="color:#008b45">newBoolValue&lt;/span>(val &lt;span style="color:#00688b;font-weight:bold">bool&lt;/span>, p *&lt;span style="color:#00688b;font-weight:bold">bool&lt;/span>) *boolValue {
*p = val
&lt;span style="color:#8b008b;font-weight:bold">return&lt;/span> (*boolValue)(p)
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>newBoolValue&lt;/code> is an unexported (private in other languages terminology)
function that creates a &lt;code>boolValue&lt;/code> which is an type alias for &lt;code>bool&lt;/code>. The pointer to
&lt;code>bool&lt;/code> passed (&lt;code>p&lt;/code> in &lt;code>BoolVar&lt;/code> and in &lt;code>newBoolValue&lt;/code> functions) is assigned to
the default value (&lt;code>value&lt;/code> in &lt;code>BoolVar&lt;/code> function and &lt;code>val&lt;/code> in &lt;code>newBoolValue&lt;/code>
function).
Then the pointer to &lt;code>bool&lt;/code> is casted to a pointer to &lt;code>boolValue&lt;/code> and
returned.&lt;/p>
&lt;p>You might be wondering: &lt;em>Why create this internal &lt;code>boolValue&lt;/code> for simply
storing the &lt;code>bool&lt;/code>?&lt;/em>&lt;/p>
&lt;p>Because &lt;code>bool&lt;/code> needs to be augmented with methods used by the flags package,
such as &lt;code>Get()&lt;/code>, &lt;code>Set()&lt;/code> and &lt;code>String()&lt;/code>, these methods satisfy the interfaces
used through the package which are &lt;code>Getter&lt;/code> and &lt;code>Value&lt;/code>.&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#8b008b;font-weight:bold">type&lt;/span> Getter &lt;span style="color:#8b008b;font-weight:bold">interface&lt;/span> {
Value
&lt;span style="color:#008b45">Get&lt;/span>() &lt;span style="color:#8b008b;font-weight:bold">interface&lt;/span>{}
}
&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#8b008b;font-weight:bold">type&lt;/span> Value &lt;span style="color:#8b008b;font-weight:bold">interface&lt;/span> {
&lt;span style="color:#008b45">String&lt;/span>() &lt;span style="color:#00688b;font-weight:bold">string&lt;/span>
&lt;span style="color:#008b45">Set&lt;/span>(&lt;span style="color:#00688b;font-weight:bold">string&lt;/span>) &lt;span style="color:#00688b;font-weight:bold">error&lt;/span>
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>According to documentation: &lt;code>Value&lt;/code> is the interface to the dynamic value
stored in a flag. &lt;code>Getter&lt;/code> is an interface that allows the contents of
&lt;code>Value&lt;/code> to be retrieved.&lt;/p>
&lt;p>You can read more of the &lt;a href="https://golang.org/pkg/flag/#Getter">Getter&lt;/a> and the
&lt;a href="https://golang.org/pkg/flag/#Value">Value&lt;/a> interface in the documentation,
but for now let&amp;rsquo;s continue with our dive.&lt;/p>
&lt;ol start="2">
&lt;li>What is &lt;code>CommandLine&lt;/code> and what does its method &lt;code>Var&lt;/code> do?&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#228b22">// CommandLine is the default set of command-line flags, parsed from os.Args.
&lt;/span>&lt;span style="color:#228b22">// The top-level functions such as BoolVar, Arg, and so on are wrappers for the
&lt;/span>&lt;span style="color:#228b22">// methods of CommandLine.
&lt;/span>&lt;span style="color:#228b22">&lt;/span>&lt;span style="color:#8b008b;font-weight:bold">var&lt;/span> CommandLine = &lt;span style="color:#008b45">NewFlagSet&lt;/span>(os.Args[&lt;span style="color:#b452cd">0&lt;/span>], ExitOnError)
&lt;/code>&lt;/pre>&lt;/div>&lt;p>As it&amp;rsquo;s very well described in the godoc, &lt;code>CommandLine&lt;/code> is the default flag
set of command line flags for the given executable, (The name used to invoke
the program is always given by &lt;code>os.Args[0]&lt;/code>)&lt;/p>
&lt;p>And the &lt;code>Var&lt;/code> method:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#228b22">// Var defines a flag with the specified name and usage string. The type and
&lt;/span>&lt;span style="color:#228b22">// value of the flag are represented by the first argument, of type Value, which
&lt;/span>&lt;span style="color:#228b22">// typically holds a user-defined implementation of Value. For instance, the
&lt;/span>&lt;span style="color:#228b22">// caller could create a flag that turns a comma-separated string into a slice
&lt;/span>&lt;span style="color:#228b22">// of strings by giving the slice the methods of Value; in particular, Set would
&lt;/span>&lt;span style="color:#228b22">// decompose the comma-separated string into the slice.
&lt;/span>&lt;span style="color:#228b22">&lt;/span>&lt;span style="color:#8b008b;font-weight:bold">func&lt;/span> (f *FlagSet) &lt;span style="color:#008b45">Var&lt;/span>(value Value, name &lt;span style="color:#00688b;font-weight:bold">string&lt;/span>, usage &lt;span style="color:#00688b;font-weight:bold">string&lt;/span>) {
&lt;span style="color:#228b22">// Remember the default value as a string; it won&amp;#39;t change.
&lt;/span>&lt;span style="color:#228b22">&lt;/span> flag := &amp;amp;Flag{name, usage, value, value.&lt;span style="color:#008b45">String&lt;/span>()}
_, alreadythere := f.formal[name]
&lt;span style="color:#8b008b;font-weight:bold">if&lt;/span> alreadythere {
&lt;span style="color:#8b008b;font-weight:bold">var&lt;/span> msg &lt;span style="color:#00688b;font-weight:bold">string&lt;/span>
&lt;span style="color:#8b008b;font-weight:bold">if&lt;/span> f.name == &lt;span style="color:#cd5555">&amp;#34;&amp;#34;&lt;/span> {
msg = fmt.&lt;span style="color:#008b45">Sprintf&lt;/span>(&lt;span style="color:#cd5555">&amp;#34;flag redefined: %s&amp;#34;&lt;/span>, name)
} &lt;span style="color:#8b008b;font-weight:bold">else&lt;/span> {
msg = fmt.&lt;span style="color:#008b45">Sprintf&lt;/span>(&lt;span style="color:#cd5555">&amp;#34;%s flag redefined: %s&amp;#34;&lt;/span>, f.name, name)
}
fmt.&lt;span style="color:#008b45">Fprintln&lt;/span>(f.&lt;span style="color:#008b45">Output&lt;/span>(), msg)
&lt;span style="color:#658b00">panic&lt;/span>(msg) &lt;span style="color:#228b22">// Happens only if flags are declared with identical names
&lt;/span>&lt;span style="color:#228b22">&lt;/span> }
&lt;span style="color:#8b008b;font-weight:bold">if&lt;/span> f.formal == &lt;span style="color:#8b008b;font-weight:bold">nil&lt;/span> {
f.formal = &lt;span style="color:#658b00">make&lt;/span>(&lt;span style="color:#8b008b;font-weight:bold">map&lt;/span>[&lt;span style="color:#00688b;font-weight:bold">string&lt;/span>]*Flag)
}
f.formal[name] = flag
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>There&amp;rsquo;s a lot going on in there but let&amp;rsquo;s go step by step.&lt;/p>
&lt;p>The godoc mentions that &lt;code>Var&lt;/code>'s first argument usually holds a user-defined
implementation of &lt;code>Value&lt;/code> and it could have a custom &lt;code>Set()&lt;/code> method that
converts its arguments into a slice or some other type aggregate type. In our
case that&amp;rsquo;s not the case but since it&amp;rsquo;s part of this method documentation
which is shown in the godoc it&amp;rsquo;s good to be as general as possible.&lt;/p>
&lt;p>Looking at the code we see that:&lt;/p>
&lt;ol>
&lt;li>A &lt;code>Flag&lt;/code> is created.&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">flag := &amp;amp;Flag{name, usage, value, value.&lt;span style="color:#008b45">String&lt;/span>()}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>And a &lt;code>Flag&lt;/code> is:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#228b22">// A Flag represents the state of a flag.
&lt;/span>&lt;span style="color:#228b22">&lt;/span>&lt;span style="color:#8b008b;font-weight:bold">type&lt;/span> Flag &lt;span style="color:#8b008b;font-weight:bold">struct&lt;/span> {
Name &lt;span style="color:#00688b;font-weight:bold">string&lt;/span> &lt;span style="color:#228b22">// name as it appears on command line
&lt;/span>&lt;span style="color:#228b22">&lt;/span> Usage &lt;span style="color:#00688b;font-weight:bold">string&lt;/span> &lt;span style="color:#228b22">// help message
&lt;/span>&lt;span style="color:#228b22">&lt;/span> Value Value &lt;span style="color:#228b22">// value as set
&lt;/span>&lt;span style="color:#228b22">&lt;/span> DefValue &lt;span style="color:#00688b;font-weight:bold">string&lt;/span> &lt;span style="color:#228b22">// default value (as text); for usage message
&lt;/span>&lt;span style="color:#228b22">&lt;/span>}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>It&amp;rsquo;s simply a struct that aggregates the name, usage, value and default value.&lt;/p>
&lt;ol start="2">
&lt;li>A check is made on a unexported map (&lt;code>f.formal&lt;/code>) which is part of the
&lt;code>FlagSet&lt;/code> (in this case of &lt;code>CommandLine&lt;/code>).&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">_, alreadythere := f.formal[name]
&lt;/code>&lt;/pre>&lt;/div>&lt;p>The &lt;code>FlagSet&lt;/code> structure has several unexported fields of which the &lt;code>Var&lt;/code>
function uses &lt;code>name&lt;/code> (a string) and &lt;code>formal&lt;/code> (a map of type &lt;code>[string]*Flag&lt;/code>)&lt;/p>
&lt;p>As can be seen here:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#228b22">// A FlagSet represents a set of defined flags. The zero value of a FlagSet
&lt;/span>&lt;span style="color:#228b22">// has no name and has ContinueOnError error handling.
&lt;/span>&lt;span style="color:#228b22">//
&lt;/span>&lt;span style="color:#228b22">// Flag names must be unique within a FlagSet. An attempt to define a flag whose
&lt;/span>&lt;span style="color:#228b22">// name is already in use will cause a panic.
&lt;/span>&lt;span style="color:#228b22">&lt;/span>&lt;span style="color:#8b008b;font-weight:bold">type&lt;/span> FlagSet &lt;span style="color:#8b008b;font-weight:bold">struct&lt;/span> {
&lt;span style="color:#228b22">// Usage is the function called when an error occurs while parsing flags.
&lt;/span>&lt;span style="color:#228b22">&lt;/span> &lt;span style="color:#228b22">// The field is a function (not a method) that may be changed to point to
&lt;/span>&lt;span style="color:#228b22">&lt;/span> &lt;span style="color:#228b22">// a custom error handler. What happens after Usage is called depends
&lt;/span>&lt;span style="color:#228b22">&lt;/span> &lt;span style="color:#228b22">// on the ErrorHandling setting; for the command line, this defaults
&lt;/span>&lt;span style="color:#228b22">&lt;/span> &lt;span style="color:#228b22">// to ExitOnError, which exits the program after calling Usage.
&lt;/span>&lt;span style="color:#228b22">&lt;/span> Usage &lt;span style="color:#8b008b;font-weight:bold">func&lt;/span>()
name &lt;span style="color:#00688b;font-weight:bold">string&lt;/span>
parsed &lt;span style="color:#00688b;font-weight:bold">bool&lt;/span>
actual &lt;span style="color:#8b008b;font-weight:bold">map&lt;/span>[&lt;span style="color:#00688b;font-weight:bold">string&lt;/span>]*Flag
formal &lt;span style="color:#8b008b;font-weight:bold">map&lt;/span>[&lt;span style="color:#00688b;font-weight:bold">string&lt;/span>]*Flag
args []&lt;span style="color:#00688b;font-weight:bold">string&lt;/span> &lt;span style="color:#228b22">// arguments after flags
&lt;/span>&lt;span style="color:#228b22">&lt;/span> errorHandling ErrorHandling
output io.Writer &lt;span style="color:#228b22">// nil means stderr; use Output() accessor
&lt;/span>&lt;span style="color:#228b22">&lt;/span>}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>The check is made as can be seen to see if the flag is redefined, returning a
different error depending on whether the flagSet has an empty name or not.&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go"> &lt;span style="color:#8b008b;font-weight:bold">if&lt;/span> alreadythere {
&lt;span style="color:#8b008b;font-weight:bold">var&lt;/span> msg &lt;span style="color:#00688b;font-weight:bold">string&lt;/span>
&lt;span style="color:#8b008b;font-weight:bold">if&lt;/span> f.name == &lt;span style="color:#cd5555">&amp;#34;&amp;#34;&lt;/span> {
msg = fmt.&lt;span style="color:#008b45">Sprintf&lt;/span>(&lt;span style="color:#cd5555">&amp;#34;flag redefined: %s&amp;#34;&lt;/span>, name)
} &lt;span style="color:#8b008b;font-weight:bold">else&lt;/span> {
msg = fmt.&lt;span style="color:#008b45">Sprintf&lt;/span>(&lt;span style="color:#cd5555">&amp;#34;%s flag redefined: %s&amp;#34;&lt;/span>, f.name, name)
}
fmt.&lt;span style="color:#008b45">Fprintln&lt;/span>(f.&lt;span style="color:#008b45">Output&lt;/span>(), msg)
&lt;span style="color:#658b00">panic&lt;/span>(msg) &lt;span style="color:#228b22">// Happens only if flags are declared with identical names
&lt;/span>&lt;span style="color:#228b22">&lt;/span> }
&lt;/code>&lt;/pre>&lt;/div>&lt;ol start="3">
&lt;li>If the map is not yet created (nil) then a maps is created.&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go"> &lt;span style="color:#8b008b;font-weight:bold">if&lt;/span> f.formal == &lt;span style="color:#8b008b;font-weight:bold">nil&lt;/span> {
f.formal = &lt;span style="color:#658b00">make&lt;/span>(&lt;span style="color:#8b008b;font-weight:bold">map&lt;/span>[&lt;span style="color:#00688b;font-weight:bold">string&lt;/span>]*Flag)
}
&lt;/code>&lt;/pre>&lt;/div>&lt;ol start="4">
&lt;li>Add an entry in the map with the name of the flag as key and the pointer to
the flag itself as value.&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">f.formal[name] = flag
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Now the next piece of the puzzle comes in the next line of our program:
&lt;code>flag.Parse()&lt;/code>.&lt;/p>
&lt;p>Diving deep again:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#228b22">// Parse parses the command-line flags from os.Args[1:]. Must be called
&lt;/span>&lt;span style="color:#228b22">// after all flags are defined and before flags are accessed by the program.
&lt;/span>&lt;span style="color:#228b22">&lt;/span>&lt;span style="color:#8b008b;font-weight:bold">func&lt;/span> &lt;span style="color:#008b45">Parse&lt;/span>() {
&lt;span style="color:#228b22">// Ignore errors; CommandLine is set for ExitOnError.
&lt;/span>&lt;span style="color:#228b22">&lt;/span> CommandLine.&lt;span style="color:#008b45">Parse&lt;/span>(os.Args[&lt;span style="color:#b452cd">1&lt;/span>:])
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>We can see that it calls the &lt;code>Parse&lt;/code> method of the &lt;code>*FlagSet&lt;/code> &lt;code>CommandLine&lt;/code>
with all the arguments passed to the executable.&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#228b22">// Parse parses flag definitions from the argument list, which should not
&lt;/span>&lt;span style="color:#228b22">// include the command name. Must be called after all flags in the FlagSet
&lt;/span>&lt;span style="color:#228b22">// are defined and before flags are accessed by the program.
&lt;/span>&lt;span style="color:#228b22">// The return value will be ErrHelp if -help or -h were set but not defined.
&lt;/span>&lt;span style="color:#228b22">&lt;/span>&lt;span style="color:#8b008b;font-weight:bold">func&lt;/span> (f *FlagSet) &lt;span style="color:#008b45">Parse&lt;/span>(arguments []&lt;span style="color:#00688b;font-weight:bold">string&lt;/span>) &lt;span style="color:#00688b;font-weight:bold">error&lt;/span> {
f.parsed = &lt;span style="color:#8b008b;font-weight:bold">true&lt;/span>
f.args = arguments
&lt;span style="color:#8b008b;font-weight:bold">for&lt;/span> {
seen, err := f.&lt;span style="color:#008b45">parseOne&lt;/span>()
&lt;span style="color:#8b008b;font-weight:bold">if&lt;/span> seen {
&lt;span style="color:#8b008b;font-weight:bold">continue&lt;/span>
}
&lt;span style="color:#8b008b;font-weight:bold">if&lt;/span> err == &lt;span style="color:#8b008b;font-weight:bold">nil&lt;/span> {
&lt;span style="color:#8b008b;font-weight:bold">break&lt;/span>
}
&lt;span style="color:#8b008b;font-weight:bold">switch&lt;/span> f.errorHandling {
&lt;span style="color:#8b008b;font-weight:bold">case&lt;/span> ContinueOnError:
&lt;span style="color:#8b008b;font-weight:bold">return&lt;/span> err
&lt;span style="color:#8b008b;font-weight:bold">case&lt;/span> ExitOnError:
&lt;span style="color:#8b008b;font-weight:bold">if&lt;/span> err == ErrHelp {
os.&lt;span style="color:#008b45">Exit&lt;/span>(&lt;span style="color:#b452cd">0&lt;/span>)
}
os.&lt;span style="color:#008b45">Exit&lt;/span>(&lt;span style="color:#b452cd">2&lt;/span>)
&lt;span style="color:#8b008b;font-weight:bold">case&lt;/span> PanicOnError:
&lt;span style="color:#658b00">panic&lt;/span>(err)
}
}
&lt;span style="color:#8b008b;font-weight:bold">return&lt;/span> &lt;span style="color:#8b008b;font-weight:bold">nil&lt;/span>
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>We can summarize this function as parsing each flag until all flags are parsed
and either errors/panics in case of an error or returns nil in case
there wasn&amp;rsquo;t any.&lt;/p>
&lt;p>More specifically the loop ends if &lt;code>err&lt;/code> returned from &lt;code>f.parseOne()&lt;/code> is
nil, and continues if the &lt;code>seen&lt;/code> returned by &lt;code>f.parseOne()&lt;/code> is &lt;code>true&lt;/code>.&lt;/p>
&lt;p>Do note, that even though arguments passed are being assigned to &lt;code>f.args&lt;/code>, the
for loop doesn&amp;rsquo;t explicitly iterate over them, instead it an infinite loops,
and &lt;code>f.parseOne()&lt;/code> handles parsing and shifting the arguments passed.&lt;/p>
&lt;p>As we can see the real key to understating the &lt;code>Parse&lt;/code> method is &lt;code>f.parseOne()&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#228b22">// parseOne parses one flag. It reports whether a flag was seen.
&lt;/span>&lt;span style="color:#228b22">&lt;/span>&lt;span style="color:#8b008b;font-weight:bold">func&lt;/span> (f *FlagSet) &lt;span style="color:#008b45">parseOne&lt;/span>() (&lt;span style="color:#00688b;font-weight:bold">bool&lt;/span>, &lt;span style="color:#00688b;font-weight:bold">error&lt;/span>) {
&lt;span style="color:#8b008b;font-weight:bold">if&lt;/span> &lt;span style="color:#658b00">len&lt;/span>(f.args) == &lt;span style="color:#b452cd">0&lt;/span> {
&lt;span style="color:#8b008b;font-weight:bold">return&lt;/span> &lt;span style="color:#8b008b;font-weight:bold">false&lt;/span>, &lt;span style="color:#8b008b;font-weight:bold">nil&lt;/span>
}
s := f.args[&lt;span style="color:#b452cd">0&lt;/span>]
&lt;span style="color:#8b008b;font-weight:bold">if&lt;/span> &lt;span style="color:#658b00">len&lt;/span>(s) &amp;lt; &lt;span style="color:#b452cd">2&lt;/span> || s[&lt;span style="color:#b452cd">0&lt;/span>] != &lt;span style="color:#cd5555">&amp;#39;-&amp;#39;&lt;/span> {
&lt;span style="color:#8b008b;font-weight:bold">return&lt;/span> &lt;span style="color:#8b008b;font-weight:bold">false&lt;/span>, &lt;span style="color:#8b008b;font-weight:bold">nil&lt;/span>
}
numMinuses := &lt;span style="color:#b452cd">1&lt;/span>
&lt;span style="color:#8b008b;font-weight:bold">if&lt;/span> s[&lt;span style="color:#b452cd">1&lt;/span>] == &lt;span style="color:#cd5555">&amp;#39;-&amp;#39;&lt;/span> {
numMinuses++
&lt;span style="color:#8b008b;font-weight:bold">if&lt;/span> &lt;span style="color:#658b00">len&lt;/span>(s) == &lt;span style="color:#b452cd">2&lt;/span> { &lt;span style="color:#228b22">// &amp;#34;--&amp;#34; terminates the flags
&lt;/span>&lt;span style="color:#228b22">&lt;/span> f.args = f.args[&lt;span style="color:#b452cd">1&lt;/span>:]
&lt;span style="color:#8b008b;font-weight:bold">return&lt;/span> &lt;span style="color:#8b008b;font-weight:bold">false&lt;/span>, &lt;span style="color:#8b008b;font-weight:bold">nil&lt;/span>
}
}
name := s[numMinuses:]
&lt;span style="color:#8b008b;font-weight:bold">if&lt;/span> &lt;span style="color:#658b00">len&lt;/span>(name) == &lt;span style="color:#b452cd">0&lt;/span> || name[&lt;span style="color:#b452cd">0&lt;/span>] == &lt;span style="color:#cd5555">&amp;#39;-&amp;#39;&lt;/span> || name[&lt;span style="color:#b452cd">0&lt;/span>] == &lt;span style="color:#cd5555">&amp;#39;=&amp;#39;&lt;/span> {
&lt;span style="color:#8b008b;font-weight:bold">return&lt;/span> &lt;span style="color:#8b008b;font-weight:bold">false&lt;/span>, f.&lt;span style="color:#008b45">failf&lt;/span>(&lt;span style="color:#cd5555">&amp;#34;bad flag syntax: %s&amp;#34;&lt;/span>, s)
}
&lt;span style="color:#228b22">// it&amp;#39;s a flag. does it have an argument?
&lt;/span>&lt;span style="color:#228b22">&lt;/span> f.args = f.args[&lt;span style="color:#b452cd">1&lt;/span>:]
hasValue := &lt;span style="color:#8b008b;font-weight:bold">false&lt;/span>
value := &lt;span style="color:#cd5555">&amp;#34;&amp;#34;&lt;/span>
&lt;span style="color:#8b008b;font-weight:bold">for&lt;/span> i := &lt;span style="color:#b452cd">1&lt;/span>; i &amp;lt; &lt;span style="color:#658b00">len&lt;/span>(name); i++ { &lt;span style="color:#228b22">// equals cannot be first
&lt;/span>&lt;span style="color:#228b22">&lt;/span> &lt;span style="color:#8b008b;font-weight:bold">if&lt;/span> name[i] == &lt;span style="color:#cd5555">&amp;#39;=&amp;#39;&lt;/span> {
value = name[i+&lt;span style="color:#b452cd">1&lt;/span>:]
hasValue = &lt;span style="color:#8b008b;font-weight:bold">true&lt;/span>
name = name[&lt;span style="color:#b452cd">0&lt;/span>:i]
&lt;span style="color:#8b008b;font-weight:bold">break&lt;/span>
}
}
m := f.formal
flag, alreadythere := m[name] &lt;span style="color:#228b22">// BUG
&lt;/span>&lt;span style="color:#228b22">&lt;/span> &lt;span style="color:#8b008b;font-weight:bold">if&lt;/span> !alreadythere {
&lt;span style="color:#8b008b;font-weight:bold">if&lt;/span> name == &lt;span style="color:#cd5555">&amp;#34;help&amp;#34;&lt;/span> || name == &lt;span style="color:#cd5555">&amp;#34;h&amp;#34;&lt;/span> { &lt;span style="color:#228b22">// special case for nice help message.
&lt;/span>&lt;span style="color:#228b22">&lt;/span> f.&lt;span style="color:#008b45">usage&lt;/span>()
&lt;span style="color:#8b008b;font-weight:bold">return&lt;/span> &lt;span style="color:#8b008b;font-weight:bold">false&lt;/span>, ErrHelp
}
&lt;span style="color:#8b008b;font-weight:bold">return&lt;/span> &lt;span style="color:#8b008b;font-weight:bold">false&lt;/span>, f.&lt;span style="color:#008b45">failf&lt;/span>(&lt;span style="color:#cd5555">&amp;#34;flag provided but not defined: -%s&amp;#34;&lt;/span>, name)
}
&lt;span style="color:#8b008b;font-weight:bold">if&lt;/span> fv, ok := flag.Value.(boolFlag); ok &amp;amp;&amp;amp; fv.&lt;span style="color:#008b45">IsBoolFlag&lt;/span>() { &lt;span style="color:#228b22">// special case: doesn&amp;#39;t need an arg
&lt;/span>&lt;span style="color:#228b22">&lt;/span> &lt;span style="color:#8b008b;font-weight:bold">if&lt;/span> hasValue {
&lt;span style="color:#8b008b;font-weight:bold">if&lt;/span> err := fv.&lt;span style="color:#008b45">Set&lt;/span>(value); err != &lt;span style="color:#8b008b;font-weight:bold">nil&lt;/span> {
&lt;span style="color:#8b008b;font-weight:bold">return&lt;/span> &lt;span style="color:#8b008b;font-weight:bold">false&lt;/span>, f.&lt;span style="color:#008b45">failf&lt;/span>(&lt;span style="color:#cd5555">&amp;#34;invalid boolean value %q for -%s: %v&amp;#34;&lt;/span>, value, name, err)
}
} &lt;span style="color:#8b008b;font-weight:bold">else&lt;/span> {
&lt;span style="color:#8b008b;font-weight:bold">if&lt;/span> err := fv.&lt;span style="color:#008b45">Set&lt;/span>(&lt;span style="color:#cd5555">&amp;#34;true&amp;#34;&lt;/span>); err != &lt;span style="color:#8b008b;font-weight:bold">nil&lt;/span> {
&lt;span style="color:#8b008b;font-weight:bold">return&lt;/span> &lt;span style="color:#8b008b;font-weight:bold">false&lt;/span>, f.&lt;span style="color:#008b45">failf&lt;/span>(&lt;span style="color:#cd5555">&amp;#34;invalid boolean flag %s: %v&amp;#34;&lt;/span>, name, err)
}
}
} &lt;span style="color:#8b008b;font-weight:bold">else&lt;/span> {
&lt;span style="color:#228b22">// It must have a value, which might be the next argument.
&lt;/span>&lt;span style="color:#228b22">&lt;/span> &lt;span style="color:#8b008b;font-weight:bold">if&lt;/span> !hasValue &amp;amp;&amp;amp; &lt;span style="color:#658b00">len&lt;/span>(f.args) &amp;gt; &lt;span style="color:#b452cd">0&lt;/span> {
&lt;span style="color:#228b22">// value is the next arg
&lt;/span>&lt;span style="color:#228b22">&lt;/span> hasValue = &lt;span style="color:#8b008b;font-weight:bold">true&lt;/span>
value, f.args = f.args[&lt;span style="color:#b452cd">0&lt;/span>], f.args[&lt;span style="color:#b452cd">1&lt;/span>:]
}
&lt;span style="color:#8b008b;font-weight:bold">if&lt;/span> !hasValue {
&lt;span style="color:#8b008b;font-weight:bold">return&lt;/span> &lt;span style="color:#8b008b;font-weight:bold">false&lt;/span>, f.&lt;span style="color:#008b45">failf&lt;/span>(&lt;span style="color:#cd5555">&amp;#34;flag needs an argument: -%s&amp;#34;&lt;/span>, name)
}
&lt;span style="color:#8b008b;font-weight:bold">if&lt;/span> err := flag.Value.&lt;span style="color:#008b45">Set&lt;/span>(value); err != &lt;span style="color:#8b008b;font-weight:bold">nil&lt;/span> {
&lt;span style="color:#8b008b;font-weight:bold">return&lt;/span> &lt;span style="color:#8b008b;font-weight:bold">false&lt;/span>, f.&lt;span style="color:#008b45">failf&lt;/span>(&lt;span style="color:#cd5555">&amp;#34;invalid value %q for flag -%s: %v&amp;#34;&lt;/span>, value, name, err)
}
}
&lt;span style="color:#8b008b;font-weight:bold">if&lt;/span> f.actual == &lt;span style="color:#8b008b;font-weight:bold">nil&lt;/span> {
f.actual = &lt;span style="color:#658b00">make&lt;/span>(&lt;span style="color:#8b008b;font-weight:bold">map&lt;/span>[&lt;span style="color:#00688b;font-weight:bold">string&lt;/span>]*Flag)
}
f.actual[name] = flag
&lt;span style="color:#8b008b;font-weight:bold">return&lt;/span> &lt;span style="color:#8b008b;font-weight:bold">true&lt;/span>, &lt;span style="color:#8b008b;font-weight:bold">nil&lt;/span>
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Whoa! That&amp;rsquo;s a lot to unpack. Fortunately we don&amp;rsquo;t need to analyze the whole
function to get to the single and double dashes logic, but let&amp;rsquo;s take it
piecemeal:&lt;/p>
&lt;ol>
&lt;li>Check if there are no arguments:&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go"> &lt;span style="color:#8b008b;font-weight:bold">if&lt;/span> &lt;span style="color:#658b00">len&lt;/span>(f.args) == &lt;span style="color:#b452cd">0&lt;/span> {
&lt;span style="color:#8b008b;font-weight:bold">return&lt;/span> &lt;span style="color:#8b008b;font-weight:bold">false&lt;/span>, &lt;span style="color:#8b008b;font-weight:bold">nil&lt;/span>
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>So if there are no arguments it simply ends parsing.&lt;/p>
&lt;ol start="2">
&lt;li>Getting the first command line argument (the actual option/flag name)&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">s := f.args[&lt;span style="color:#b452cd">0&lt;/span>]
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Since &lt;code>f.args&lt;/code> was all the command line arguments with whom the executable was
called (this is simply assigning to &lt;code>s&lt;/code> the first command line argument).
Later we will see that the &lt;code>f.args&lt;/code> slice gets updated in this function, so
that it we advance the command line arguments seen.&lt;/p>
&lt;p>In our example program, this would make:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">s := &lt;span style="color:#cd5555">&amp;#34;-verbose&amp;#34;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;ol start="3">
&lt;li>&lt;strong>The actual explanation of why the short and long options work&lt;/strong>&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go"> &lt;span style="color:#8b008b;font-weight:bold">if&lt;/span> &lt;span style="color:#658b00">len&lt;/span>(s) &amp;lt; &lt;span style="color:#b452cd">2&lt;/span> || s[&lt;span style="color:#b452cd">0&lt;/span>] != &lt;span style="color:#cd5555">&amp;#39;-&amp;#39;&lt;/span> {
&lt;span style="color:#8b008b;font-weight:bold">return&lt;/span> &lt;span style="color:#8b008b;font-weight:bold">false&lt;/span>, &lt;span style="color:#8b008b;font-weight:bold">nil&lt;/span>
}
numMinuses := &lt;span style="color:#b452cd">1&lt;/span>
&lt;span style="color:#8b008b;font-weight:bold">if&lt;/span> s[&lt;span style="color:#b452cd">1&lt;/span>] == &lt;span style="color:#cd5555">&amp;#39;-&amp;#39;&lt;/span> {
numMinuses++
&lt;span style="color:#8b008b;font-weight:bold">if&lt;/span> &lt;span style="color:#658b00">len&lt;/span>(s) == &lt;span style="color:#b452cd">2&lt;/span> { &lt;span style="color:#228b22">// &amp;#34;--&amp;#34; terminates the flags
&lt;/span>&lt;span style="color:#228b22">&lt;/span> f.args = f.args[&lt;span style="color:#b452cd">1&lt;/span>:]
&lt;span style="color:#8b008b;font-weight:bold">return&lt;/span> &lt;span style="color:#8b008b;font-weight:bold">false&lt;/span>, &lt;span style="color:#8b008b;font-weight:bold">nil&lt;/span>
}
}
name := s[numMinuses:]
&lt;/code>&lt;/pre>&lt;/div>&lt;p>To explain this part let&amp;rsquo;s continue with the flag in our example program &lt;code>s&lt;/code>,
but let&amp;rsquo;s assume we have invoked it with 2 dashes:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">s := &lt;span style="color:#cd5555">&amp;#34;--verbose&amp;#34;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>The first if returns if the length of &lt;code>s&lt;/code> is 1 or not if the first rune
(character) is not a dash. None of these is our case.&lt;/p>
&lt;p>Since we don&amp;rsquo;t enter the body of the if statement the first rune &lt;em>must&lt;/em> be a
dash, or minus as it is called in the code, then the &lt;code>numMinuses&lt;/code> is set to 1.&lt;/p>
&lt;p>The second if checks whether the second character of the string is a dash &lt;code>-&lt;/code>
and if it is it increments the &lt;code>numMinuses&lt;/code> to 2. If it isn&amp;rsquo;t then the body of
the if is skipped.&lt;/p>
&lt;p>Then checks if s consist of just that: two dashes (&lt;code>--&lt;/code>), since the two dashes
is the flags terminator as we can see the function returns also false, and nil
as before.&lt;/p>
&lt;p>After this the &lt;code>name := s[numMinuses:]&lt;/code> slices the string so as to only trim
the dashes and leave only the name of the flag.&lt;/p>
&lt;p>i.e: &lt;code>name := &amp;quot;verbose&amp;quot;&lt;/code>&lt;/p>
&lt;p>And this is the reason why the standard library &lt;code>flag&lt;/code> package works for both
single or double dashes.&lt;/p>
&lt;p>Now if you&amp;rsquo;ve made it this far &lt;em>and&lt;/em> you&amp;rsquo;re also learning this was also news
to you, then I&amp;rsquo;m afraid this wasn&amp;rsquo;t a big reveal and is actually expected.&lt;/p>
&lt;p>&lt;em>&lt;strong>This is actually documented behavior&lt;/strong>&lt;/em>, the thing is that is not actually &lt;strong>well
documented&lt;/strong>. From the
&lt;a href="https://golang.org/pkg/flag/#hdr-Command_line_flag_syntax">docs&lt;/a>, we can see
that it shows 3 examples with a single dash but the text below mentions that
double dashes are also possible.&lt;/p>
&lt;p>&lt;img src="../../img/screenshot_flag_pkg_go.png" alt="screenshot_flag_pkg_go">&lt;/p>
&lt;p>So, yeah, RTFM am I right?&lt;/p>
&lt;p>OK, great. But this still doesn&amp;rsquo;t answer the question: &lt;strong>Is it possible to
have short/long options using just flag package?&lt;/strong>&lt;/p>
&lt;p>Well with this newfound knowledge of how flags are made and kept in the
&lt;code>*FlagSet&lt;/code> this should be now a bit more straightforward, but let&amp;rsquo;s check how it
is done in
&lt;a href="https://github.com/FiloSottile/age/blob/master/cmd/age/age.go#L97-L102">age&lt;/a>&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go"> flag.&lt;span style="color:#008b45">BoolVar&lt;/span>(&amp;amp;decryptFlag, &lt;span style="color:#cd5555">&amp;#34;d&amp;#34;&lt;/span>, &lt;span style="color:#8b008b;font-weight:bold">false&lt;/span>, &lt;span style="color:#cd5555">&amp;#34;decrypt the input&amp;#34;&lt;/span>)
flag.&lt;span style="color:#008b45">BoolVar&lt;/span>(&amp;amp;decryptFlag, &lt;span style="color:#cd5555">&amp;#34;decrypt&amp;#34;&lt;/span>, &lt;span style="color:#8b008b;font-weight:bold">false&lt;/span>, &lt;span style="color:#cd5555">&amp;#34;decrypt the input&amp;#34;&lt;/span>)
flag.&lt;span style="color:#008b45">BoolVar&lt;/span>(&amp;amp;encryptFlag, &lt;span style="color:#cd5555">&amp;#34;e&amp;#34;&lt;/span>, &lt;span style="color:#8b008b;font-weight:bold">false&lt;/span>, &lt;span style="color:#cd5555">&amp;#34;encrypt the input&amp;#34;&lt;/span>)
flag.&lt;span style="color:#008b45">BoolVar&lt;/span>(&amp;amp;encryptFlag, &lt;span style="color:#cd5555">&amp;#34;encrypt&amp;#34;&lt;/span>, &lt;span style="color:#8b008b;font-weight:bold">false&lt;/span>, &lt;span style="color:#cd5555">&amp;#34;encrypt the input&amp;#34;&lt;/span>)
flag.&lt;span style="color:#008b45">BoolVar&lt;/span>(&amp;amp;passFlag, &lt;span style="color:#cd5555">&amp;#34;p&amp;#34;&lt;/span>, &lt;span style="color:#8b008b;font-weight:bold">false&lt;/span>, &lt;span style="color:#cd5555">&amp;#34;use a passphrase&amp;#34;&lt;/span>)
flag.&lt;span style="color:#008b45">BoolVar&lt;/span>(&amp;amp;passFlag, &lt;span style="color:#cd5555">&amp;#34;passphrase&amp;#34;&lt;/span>, &lt;span style="color:#8b008b;font-weight:bold">false&lt;/span>, &lt;span style="color:#cd5555">&amp;#34;use a passphrase&amp;#34;&lt;/span>)
&lt;/code>&lt;/pre>&lt;/div>&lt;p>As can be seen all that it&amp;rsquo;s needed is to assign to the same variable two
flags: one with a single letter and one with a word. Of course this doesn&amp;rsquo;t
prevent anyone from using the single dash with the word form or the double
dash with the single letter, but if the ergonomics and restricting the usages
are really important, you can always modify &lt;code>flag.Usage&lt;/code> so that these two
cases are documented, &lt;a href="https://github.com/FiloSottile/age/blob/master/cmd/age/age.go#L35">as it is done with
&lt;code>age&lt;/code>&lt;/a>.&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#8b008b;font-weight:bold">const&lt;/span> usage = &lt;span style="color:#a61717;background-color:#e3d2d2">`&lt;/span>Usage:
age [--encrypt] (-r RECIPIENT | -R PATH)... [--armor] [-o OUTPUT] [INPUT]
age [--encrypt] --passphrase [--armor] [-o OUTPUT] [INPUT]
age --decrypt [-i PATH]... [-o OUTPUT] [INPUT]
Options:
-e, --encrypt Encrypt the input to the output. Default &lt;span style="color:#8b008b;font-weight:bold">if&lt;/span> omitted.
-d, --decrypt Decrypt the input to the output.
-o, --output OUTPUT Write the result to the file at path OUTPUT.
-a, --armor Encrypt to a PEM encoded format.
-p, --passphrase Encrypt with a passphrase.
&lt;/code>&lt;/pre>&lt;/div>&lt;p>We can test it in our tiny example program by adding an extra line with &lt;code>&amp;quot;v&amp;quot;&lt;/code>
as flag name such that it looks like this:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#8b008b;font-weight:bold">package&lt;/span> main
&lt;span style="color:#8b008b;font-weight:bold">import&lt;/span> (
&lt;span style="color:#cd5555">&amp;#34;fmt&amp;#34;&lt;/span>
&lt;span style="color:#cd5555">&amp;#34;flag&amp;#34;&lt;/span>
)
&lt;span style="color:#8b008b;font-weight:bold">func&lt;/span> &lt;span style="color:#008b45">main&lt;/span>() {
&lt;span style="color:#8b008b;font-weight:bold">var&lt;/span> verbose &lt;span style="color:#00688b;font-weight:bold">bool&lt;/span>
flag.&lt;span style="color:#008b45">BoolVar&lt;/span>(&amp;amp;verbose, &lt;span style="color:#cd5555">&amp;#34;verbose&amp;#34;&lt;/span>, &lt;span style="color:#8b008b;font-weight:bold">false&lt;/span>, &lt;span style="color:#cd5555">&amp;#34;verbose output&amp;#34;&lt;/span>)
flag.&lt;span style="color:#008b45">BoolVar&lt;/span>(&amp;amp;verbose, &lt;span style="color:#cd5555">&amp;#34;v&amp;#34;&lt;/span>, &lt;span style="color:#8b008b;font-weight:bold">false&lt;/span>, &lt;span style="color:#cd5555">&amp;#34;verbose output&amp;#34;&lt;/span>)
flag.&lt;span style="color:#008b45">Parse&lt;/span>()
&lt;span style="color:#8b008b;font-weight:bold">if&lt;/span> verbose {
fmt.&lt;span style="color:#008b45">Println&lt;/span>(&lt;span style="color:#cd5555">&amp;#34;verbose is on&amp;#34;&lt;/span>)
}
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Don&amp;rsquo;t forget to build it after modifying it.&lt;/p>
&lt;p>Invoking it with &lt;code>-v&lt;/code>, &lt;code>--v&lt;/code> and of course the other two cases works as well:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-sh" data-lang="sh">$ ./using_flag -v
verbose is on
$ ./using_flag --verbose
verbose is on
$ ./using_flag --v
verbose is on
$ ./using_flag -verbose
verbose is on
&lt;/code>&lt;/pre>&lt;/div>&lt;p>And of course invoking it with three (or more dashes) dashes results in a
error:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-sh" data-lang="sh">$ ./using_flag ---verbose
bad flag syntax: ---verbose
Usage of ./using_flag:
-v verbose output
-verbose
verbose output
$
&lt;/code>&lt;/pre>&lt;/div>&lt;p>For completion&amp;rsquo;s sake we&amp;rsquo;ll modify the &lt;code>flag.Usage&lt;/code> so that we have a neater
error when we either print help or have an error parsing flags:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#8b008b;font-weight:bold">package&lt;/span> main
&lt;span style="color:#8b008b;font-weight:bold">import&lt;/span> (
&lt;span style="color:#cd5555">&amp;#34;flag&amp;#34;&lt;/span>
&lt;span style="color:#cd5555">&amp;#34;fmt&amp;#34;&lt;/span>
)
&lt;span style="color:#8b008b;font-weight:bold">const&lt;/span> usage = &lt;span style="color:#cd5555">`Usage of using_flag:
&lt;/span>&lt;span style="color:#cd5555"> -v, --verbose verbose output
&lt;/span>&lt;span style="color:#cd5555"> -h, --help prints help information
&lt;/span>&lt;span style="color:#cd5555">`&lt;/span>
&lt;span style="color:#8b008b;font-weight:bold">func&lt;/span> &lt;span style="color:#008b45">main&lt;/span>() {
&lt;span style="color:#8b008b;font-weight:bold">var&lt;/span> verbose &lt;span style="color:#00688b;font-weight:bold">bool&lt;/span>
flag.&lt;span style="color:#008b45">BoolVar&lt;/span>(&amp;amp;verbose, &lt;span style="color:#cd5555">&amp;#34;verbose&amp;#34;&lt;/span>, &lt;span style="color:#8b008b;font-weight:bold">false&lt;/span>, &lt;span style="color:#cd5555">&amp;#34;verbose output&amp;#34;&lt;/span>)
flag.&lt;span style="color:#008b45">BoolVar&lt;/span>(&amp;amp;verbose, &lt;span style="color:#cd5555">&amp;#34;v&amp;#34;&lt;/span>, &lt;span style="color:#8b008b;font-weight:bold">false&lt;/span>, &lt;span style="color:#cd5555">&amp;#34;verbose output&amp;#34;&lt;/span>)
flag.Usage = &lt;span style="color:#8b008b;font-weight:bold">func&lt;/span>() { fmt.&lt;span style="color:#008b45">Print&lt;/span>(usage) }
flag.&lt;span style="color:#008b45">Parse&lt;/span>()
&lt;span style="color:#8b008b;font-weight:bold">if&lt;/span> verbose {
fmt.&lt;span style="color:#008b45">Println&lt;/span>(&lt;span style="color:#cd5555">&amp;#34;verbose is on&amp;#34;&lt;/span>)
}
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>which outputs:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-sh" data-lang="sh">$ ./using_flag ---verbose
bad flag syntax: ---verbose
Usage of using_flag:
-v, --verbose verbose output
-h, --help prints &lt;span style="color:#658b00">help&lt;/span> information
$
&lt;/code>&lt;/pre>&lt;/div>&lt;p>I think the main reason people assume this isn&amp;rsquo;t possible is because the
flag documentation doesn&amp;rsquo;t &lt;em>&lt;strong>show&lt;/strong>&lt;/em> that the options could be passed with
&lt;em>single or double dash&lt;/em>. The fact that by far most people that want a CLI that
handles flags cleaning use &lt;a href="https://www.github.com/spf13/cobra">spf13/cobra&lt;/a>
doesn&amp;rsquo;t help either. Also it doesn&amp;rsquo;t help that is a high quality package with
nice ergonomics.&lt;/p>
&lt;p>But as you can see, it&amp;rsquo;s not essential to use in order to have regular
Unix-style command line options.&lt;/p>
&lt;p>That&amp;rsquo;s all folks. Happy hacking!&lt;/p>
- https://www.antoniojgutierrez.com/posts/2021-05-14-short-and-long-options-in-go-flags-pkg/ - Antonio Gutierrez 2015-2021. CC-BY-NC 4.0</description></item><item><title>Things to backup before doing a factory reset of an Android Phone</title><link>https://www.antoniojgutierrez.com/posts/2021-01-31-steps_todo_before_factory_reset_android/</link><pubDate>Sun, 31 Jan 2021 23:46:55 +0100</pubDate><guid>https://www.antoniojgutierrez.com/posts/2021-01-31-steps_todo_before_factory_reset_android/</guid><description>Murmurations of Neurons https://www.antoniojgutierrez.com/posts/2021-01-31-steps_todo_before_factory_reset_android/ -&lt;p>There&amp;rsquo;s always something that I miss whenever I do a factory reset of my
personal phone, whether it&amp;rsquo;s the signal backup (which is now enabled by
the usage of a PIN), or some new 2FA code. This post (as many of them are)
are mental (and written) notes for future me to remember.&lt;/p>
&lt;h2 id="signal-backup">Signal backup&lt;/h2>
&lt;p>Signal now allows you to backup chats and media into a local directory in the
phone. When a Signal is reinstalled it prompts you for restoring from a local
backup. Remember to write down the backup code otherwise you will not be able
to restore.&lt;/p>
&lt;p>To enable backup of the Chats you must go to &lt;code>Settings -&amp;gt; Chats -&amp;gt; Chat backups&lt;/code> and click the &lt;code>Turn On&lt;/code> button and write down the backup code.&lt;/p>
&lt;h2 id="whatsapp-backup">WhatsApp backup&lt;/h2>
&lt;p>WhatsApp backups up the conversations to Google Drive by default, but does so
on a weekly basis, therefore in order to not miss out on potentially 6 days of
messages, you should manually trigger a backup.&lt;/p>
&lt;p>In order to trigger one, you must go to &lt;code>Settings -&amp;gt; Chats -&amp;gt; Chat backup -&amp;gt; Back up&lt;/code>&lt;/p>
&lt;h2 id="browser-profile-sync">Browser profile sync&lt;/h2>
&lt;p>For Firefox, Go to &lt;code>Settings -&amp;gt; YOUR_ACCOUNT -&amp;gt; Sync Now&lt;/code>
For Chrome, there&amp;rsquo;s no a manual sync now button that I could tell but you
could disable and enable sync and that should trigger at least a check.&lt;/p>
&lt;h2 id="2fa-authentication-code-backups">2FA Authentication code backups&lt;/h2>
&lt;p>If you must do one backup &lt;strong>this is the one you must do&lt;/strong>; you&amp;rsquo;ll be in a
world of pain when you can&amp;rsquo;t access your accounts due to missing 2FA.
Fortunately there are several ways on how to backup these now for each one of
the famous apps like Google Authenticator, Authy, and others.&lt;/p>
&lt;h2 id="important-notes">Important notes&lt;/h2>
&lt;ul>
&lt;li>Unlocking &lt;em>&lt;strong>and&lt;/strong>&lt;/em> locking the bootloader resets the phone.&lt;/li>
&lt;li>Very difficult to get rid of Google Play services completely if choosing the
red pill and going for a custom ROM.&lt;/li>
&lt;/ul>
&lt;p>As you can see most everything is backed up by default to the cloud either
associated to an Gmail account or the apps themselves maintain state in the
cloud, so that in both cases a simple sign in would restore your profile to
its last state.&lt;/p>
&lt;p>Hooray for the cloud?!&lt;/p>
- https://www.antoniojgutierrez.com/posts/2021-01-31-steps_todo_before_factory_reset_android/ - Antonio Gutierrez 2015-2021. CC-BY-NC 4.0</description></item><item><title>Notes from Lex Fridman and Chris Lattner interview Part 2 (Lex Fridman Podcast)</title><link>https://www.antoniojgutierrez.com/posts/2020-09-14-notes_on_lex_fridman_chris_lattner_interview_part2/</link><pubDate>Mon, 14 Sep 2020 00:12:04 +0200</pubDate><guid>https://www.antoniojgutierrez.com/posts/2020-09-14-notes_on_lex_fridman_chris_lattner_interview_part2/</guid><description>Murmurations of Neurons https://www.antoniojgutierrez.com/posts/2020-09-14-notes_on_lex_fridman_chris_lattner_interview_part2/ -&lt;p>After watching the 2 hour+ interview of Chris Lattner in the Lex Fridman
podcast I just knew I &lt;em>had&lt;/em> to write down some of the gems I heard from Chris
Lattner.&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;em>&lt;strong>“Turns out if you ask a lot of dumb questions, you learn pretty quickly”&lt;/strong>&lt;/em>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;em>&lt;strong>“In a way, types are like assertions which are checked at compile time”&lt;/strong>&lt;/em>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;em>&lt;strong>“Just making a hello world, won&amp;rsquo;t get you get used to the language. Your
mind needs time and practice. It&amp;rsquo;s the same as if you change diet, you need
time for your metabolism to adapt”&lt;/strong>&lt;/em>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;em>&lt;strong>“What I mean by messed up: very rarely used for good, often used for bugs”&lt;/strong>&lt;/em>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;em>&lt;strong>“Being first principles where you&amp;rsquo;re coming from and what you&amp;rsquo;re trying to
achieve”&lt;/strong>&lt;/em>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;em>&lt;strong>“Fun things about learning programming languages: when you start doing
them, you start learning new things. You have a new way of doing things and
you&amp;rsquo;re forced to do them, and that forces you to explore. That puts you in
learning mode and your mind kind of opens a little bit. And you start seeing
things differently even the old things”&lt;/strong>&lt;/em>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>These are just some of the few nuggets of wisdoms and insights that I stuck
with me after watching it. These long form conversations from Lex Fridman, are
an awesome medium through which I learn form other people and I find it
particularly engrossing since it allows more nuance in the dialogue.&lt;/p>
&lt;p>I 1000% recommend &lt;a href="https://www.youtube.com/watch?v=nWTvXbQHwWs">this episode&lt;/a>
and the whole podcast itself, and will probably write down some more notes of
future episodes.&lt;/p>
- https://www.antoniojgutierrez.com/posts/2020-09-14-notes_on_lex_fridman_chris_lattner_interview_part2/ - Antonio Gutierrez 2015-2021. CC-BY-NC 4.0</description></item><item><title>Fixing Firefox screen tearing while scrolling / video playback</title><link>https://www.antoniojgutierrez.com/posts/2020-05-04-firefox_screen_tearing_while_scrolling/</link><pubDate>Mon, 04 May 2020 00:00:00 +0000</pubDate><guid>https://www.antoniojgutierrez.com/posts/2020-05-04-firefox_screen_tearing_while_scrolling/</guid><description>Murmurations of Neurons https://www.antoniojgutierrez.com/posts/2020-05-04-firefox_screen_tearing_while_scrolling/ -&lt;p>For a while now I&amp;rsquo;ve noticed screen tearing while scrolling on Wikipedia or on
YouTube videos whenever there&amp;rsquo;s sudden movement.&lt;/p>
&lt;p>Today I decided to do something about it, and considering I hadn&amp;rsquo;t touch the
Xorg conf files &amp;ldquo;generated&amp;rdquo; by &lt;code>nvidia-xconfig&lt;/code> in more than 4 years, I was
optimistic that it would be some configuration issue that would have been
automatically resolved by now with newer drivers and OpenGL versions.
Furthermore as the quotes on generated suggest, they weren&amp;rsquo;t pristine
generated Xorg conf files since I had tinkered with them
quite a bit in the past when I was running two Nvidia cards on Arch which I
mentioned in passing in a &lt;a href="https://www.antoniojgutierrez.com/2017/08/20/changing_xorg_conf.html">previous
post&lt;/a>&lt;/p>
&lt;p>So the first thing I did was generate a new Xorg conf, using the command:&lt;/p>
&lt;pre>&lt;code>$ nvidia-xconfig
&lt;/code>&lt;/pre>&lt;p>Which graciously backups the previous config and generates a new one in its stead.&lt;/p>
&lt;p>Having done that I rebooted the computer, opened Firefox and scrolled some
long articles in Wikipedia (like the one for the current &lt;a href="https://en.wikipedia.org/wiki/COVID-19_pandemic">Covid-19
Pandemic&lt;/a>) but the tearing
was still there.&lt;/p>
&lt;p>So I searched the web and found &lt;a href="https://www.reddit.com/r/linuxmint/comments/9pb5ur/screen_tearing_while_scrolling/">this post on
reddit&lt;/a>
which basically describes exactly what was happening to me.&lt;/p>
&lt;p>In it there are basically two solutions provided by the community:&lt;/p>
&lt;ol>
&lt;li>
&lt;p>Force GPU Acceleration on Firefox&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Force Full Composition Pipeline of the Nvidia card.&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>The first one was self explanatory and the simplest, besides if you have the
hardware you would want to use it whenever and wherever you can, specially in
a desktop environment, where you&amp;rsquo;re not restricted by power consumption from a
battery.&lt;/p>
&lt;p>As for the second option, from the comments and after looking into the good
ole trusty &lt;a href="https://wiki.archlinux.org/index.php/NVIDIA/Troubleshooting#Avoid_screen_tearing">Arch Wiki for screen tearing on
nvidia&lt;/a>,
it seems that while this &lt;em>does&lt;/em> avoid screen tearing not just in Firefox
but in every application, it comes with a performance penalty in OpenGL
applications as well as increasing the time needed for the GPU to &amp;ldquo;clock down&amp;rdquo;
i.e: bring its frequency back down due to changing power states after some
rendering task is finished.&lt;/p>
&lt;p>Since in my case I&amp;rsquo;ve only noticed the screen tearing in Firefox, it seemed
like a no-brainer opt for this approach.&lt;/p>
&lt;p>To change I simply needed to go to the advanced preferences page of Firefox
reached by navigating to &lt;code>about:config&lt;/code> in the browser, search for
&lt;code>layers.acceleration.force-enabled&lt;/code>, set it to &lt;code>true&lt;/code> and restart Firefox.&lt;/p>
&lt;p>Voilà.&lt;/p>
&lt;p>Side note: The reason why GPU Acceleration is disabled by default in Firefox
on most, if not all Linux distributions is because WebGL is considered by many
as a security risk. For more a detailed explanation &lt;a href="https://security.stackexchange.com/questions/13799/is-webgl-a-security-concern">check this
security.stackexchange
answer&lt;/a>&lt;/p>
- https://www.antoniojgutierrez.com/posts/2020-05-04-firefox_screen_tearing_while_scrolling/ - Antonio Gutierrez 2015-2021. CC-BY-NC 4.0</description></item><item><title>Mounting/Playing/Ripping audio CDs like it's 1995 (in Arch Linux)</title><link>https://www.antoniojgutierrez.com/posts/2020-02-01-ripping_audio_cds_like_its_1995/</link><pubDate>Sat, 01 Feb 2020 00:00:00 +0000</pubDate><guid>https://www.antoniojgutierrez.com/posts/2020-02-01-ripping_audio_cds_like_its_1995/</guid><description>Murmurations of Neurons https://www.antoniojgutierrez.com/posts/2020-02-01-ripping_audio_cds_like_its_1995/ -&lt;p>First post of the year! Yey!&lt;/p>
&lt;p>Like many other posts, the motivation of this one is to facilitate other
people running into the same issues as me, to quickly find
their solution.&lt;/p>
&lt;p>So here&amp;rsquo;s the problem statement:&lt;/p>
&lt;p>You want to play an audio CD in an Arch Laptop or simply get the audio files. What do you do?&lt;/p>
&lt;p>Well first you buy an external CD/DVD ROM player, which you can connect (and
power) through USB.&lt;/p>
&lt;p>Then you should mount it, to later get the files or simply rip them, right?&amp;hellip;&lt;/p>
&lt;p>If you assume that mounting a CD ROM is exactly the same as mounting a
USB, then you would just connect the CD ROM player to the laptop, insert the
CD and
mount it with a command like:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">sudo mount /dev/sr0 /mnt/cdrom
&lt;/code>&lt;/pre>&lt;/div>&lt;p>But you would get an error:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">mount: /mnt/cdrom: can&lt;span style="color:#a61717;background-color:#e3d2d2">&amp;#39;&lt;/span>t &lt;span style="color:#658b00">read&lt;/span> superblock on /dev/sr0.
&lt;/code>&lt;/pre>&lt;/div>&lt;p>So you search online the error and realize that it&amp;rsquo;s due to the fact that CD
doesn&amp;rsquo;t use the same filesystem as the laptop, which by default for most
distros is ext4. CDs/DVDs use a different filesystem. That filesystem is
ISO9660, which is the regular filesystem for optical media.&lt;/p>
&lt;p>So now you search online: for something like &lt;em>&amp;ldquo;mount+CD+ROM+linux&amp;rdquo;&lt;/em>, which tells you the right command is:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">mount -t iso9660 -o ro /dev/sr0 /mnt/cdrom
&lt;/code>&lt;/pre>&lt;/div>&lt;p>But when you try it, you get this error:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">mount: /mnt/cdrom: wrong fs type, bad option, bad superblock on /dev/sr0, missing codepage or helper program, or other
error.
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Then you wonder if it&amp;rsquo;s a hardware issue and you look for the message buffer
of the kernel, using &lt;code>dmesg&lt;/code> and find some errors like:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">[ 4325.239696] sr 1:0:0:0: [sr0] tag#0 FAILED Result: &lt;span style="color:#00688b">hostbyte&lt;/span>=DID_OK &lt;span style="color:#00688b">driverbyte&lt;/span>=DRIVER_SENSE
[ 4325.239708] sr 1:0:0:0: [sr0] tag#0 Sense Key : Illegal Request [current]
[ 4325.239718] sr 1:0:0:0: [sr0] tag#0 Add. Sense: Illegal mode &lt;span style="color:#8b008b;font-weight:bold">for&lt;/span> this track
[ 4325.239729] sr 1:0:0:0: [sr0] tag#0 CDB: Read(10) &lt;span style="color:#b452cd">28&lt;/span> &lt;span style="color:#b452cd">00&lt;/span> &lt;span style="color:#b452cd">00&lt;/span> &lt;span style="color:#b452cd">04&lt;/span> 0c &lt;span style="color:#b452cd">60&lt;/span> &lt;span style="color:#b452cd">00&lt;/span> &lt;span style="color:#b452cd">00&lt;/span> &lt;span style="color:#b452cd">02&lt;/span> &lt;span style="color:#b452cd">00&lt;/span> &lt;span style="color:#b452cd">00&lt;/span> &lt;span style="color:#b452cd">00&lt;/span>
[ 4325.239741] blk_update_request: I/O error, dev sr0, sector &lt;span style="color:#b452cd">1061248&lt;/span> op 0x0:(READ) flags 0x80700 phys_seg &lt;span style="color:#b452cd">1&lt;/span> prio class
&lt;span style="color:#b452cd">0&lt;/span>
[ 4325.241965] attempt to access beyond end of device
[ 4325.241974] sr0: &lt;span style="color:#00688b">rw&lt;/span>=0, &lt;span style="color:#00688b">want&lt;/span>=1061256, &lt;span style="color:#00688b">limit&lt;/span>=&lt;span style="color:#b452cd">1061248&lt;/span>
[ 4325.241982] Buffer I/O error on dev sr0, logical block 132656, async page &lt;span style="color:#658b00">read&lt;/span>
[ 4325.242014] blk_update_request: I/O error, dev loop0, sector &lt;span style="color:#b452cd">1061248&lt;/span> op 0x0:(READ) flags 0x80700 phys_seg &lt;span style="color:#b452cd">1&lt;/span> prio cla
ss &lt;span style="color:#b452cd">0&lt;/span>
[ 4325.243811] attempt to access beyond end of device
[ 4325.243820] sr0: &lt;span style="color:#00688b">rw&lt;/span>=0, &lt;span style="color:#00688b">want&lt;/span>=1061256, &lt;span style="color:#00688b">limit&lt;/span>=&lt;span style="color:#b452cd">1061248&lt;/span>
[ 4325.243828] Buffer I/O error on dev sr0, logical block 132656, async page &lt;span style="color:#658b00">read&lt;/span>
[ 4325.243855] blk_update_request: I/O error, dev loop0, sector &lt;span style="color:#b452cd">1061248&lt;/span> op 0x0:(READ) flags 0x0 phys_seg &lt;span style="color:#b452cd">1&lt;/span> prio class &lt;span style="color:#b452cd">0&lt;/span>
[ 4325.243862] Buffer I/O error on dev loop0, logical block 530624, async page &lt;span style="color:#658b00">read&lt;/span>
[ 4325.243880] attempt to access beyond end of device
[ 4325.243885] sr0: &lt;span style="color:#00688b">rw&lt;/span>=0, &lt;span style="color:#00688b">want&lt;/span>=1061256, &lt;span style="color:#00688b">limit&lt;/span>=&lt;span style="color:#b452cd">1061248&lt;/span>
[ 4325.243890] Buffer I/O error on dev sr0, logical block 132656, async page &lt;span style="color:#658b00">read&lt;/span>
[ 4325.243904] blk_update_request: I/O error, dev loop0, sector &lt;span style="color:#b452cd">1061250&lt;/span> op 0x0:(READ) flags 0x0 phys_seg &lt;span style="color:#b452cd">1&lt;/span> prio class &lt;span style="color:#b452cd">0&lt;/span>
[ 4325.243909] Buffer I/O error on dev loop0, logical block 530625, async page &lt;span style="color:#658b00">read&lt;/span>
[ 4325.243919] attempt to access beyond end of device
[ 4325.243924] sr0: &lt;span style="color:#00688b">rw&lt;/span>=0, &lt;span style="color:#00688b">want&lt;/span>=1061256, &lt;span style="color:#00688b">limit&lt;/span>=&lt;span style="color:#b452cd">1061248&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Which suggest we are still trying to mount it wrongly.&lt;/p>
&lt;p>At which point you then start searching for: &lt;em>&amp;ldquo;mount+Audio+CD+linux&amp;rdquo;&lt;/em>, which
leads you to this &lt;a href="https://unix.stackexchange.com/a/204032">answer in unix
stackexchange&lt;/a>, which explains that
you &lt;strong>can&amp;rsquo;t&lt;/strong> mount Audio CDs, you simply &lt;em>play them directly&lt;/em>.&lt;/p>
&lt;p>You can try the command in the answer to verify that it in fact works:&lt;/p>
&lt;pre>&lt;code>mplayer -cdrom-device /dev/cdrom -cache 5000 cdda://1
&lt;/code>&lt;/pre>&lt;p>This should get the ROM spinning and you would start hearing one of the audio tracks.&lt;/p>
&lt;p>Ok so &lt;strong>Audio CDs can&amp;rsquo;t be mounted&lt;/strong>, so you skip to the second part, which is ripping the tracks.&lt;/p>
&lt;p>As usual, the ArchWiki has the answer. 99% of the times you have an issue in an
Arch installation it is already addressed in one article or another, but it
never ceases to surprise me how wide their breadth of topics is!&lt;/p>
&lt;p>The article: &lt;a href="https://wiki.archlinux.org/index.php/Rip_Audio_CDs#Ripping">Rip Audio
CDs&lt;/a>, has the
command that would get you all tracks, which requires installing &lt;code>cdrtools&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">cdda2wav -vall &lt;span style="color:#00688b">cddb&lt;/span>=&lt;span style="color:#b452cd">0&lt;/span> &lt;span style="color:#00688b">speed&lt;/span>=&lt;span style="color:#b452cd">4&lt;/span> -paranoia &lt;span style="color:#00688b">paraopts&lt;/span>=proof -B -D /dev/sr0
&lt;/code>&lt;/pre>&lt;/div>&lt;p>That will get your CD ROM spinning and after some minutes all the tracks in
your current directory as wav files.&lt;/p>
&lt;p>There&amp;rsquo;s more information in the article in case you would like to encode them
into other formats, like mp3 or flac.&lt;/p>
&lt;p>Happy listening!&lt;/p>
- https://www.antoniojgutierrez.com/posts/2020-02-01-ripping_audio_cds_like_its_1995/ - Antonio Gutierrez 2015-2021. CC-BY-NC 4.0</description></item><item><title>Backing up Google Authenticators's Keys from an Android Phone</title><link>https://www.antoniojgutierrez.com/posts/2019-12-15-backing_up_google_authenticator_keys/</link><pubDate>Sun, 15 Dec 2019 00:00:00 +0000</pubDate><guid>https://www.antoniojgutierrez.com/posts/2019-12-15-backing_up_google_authenticator_keys/</guid><description>Murmurations of Neurons https://www.antoniojgutierrez.com/posts/2019-12-15-backing_up_google_authenticator_keys/ -&lt;p>I wanted to backup my 2FA codes stored in Google&amp;rsquo;s Authenticator app. I don&amp;rsquo;t
want lose access to my accounts, in case I lose that phone.&lt;/p>
&lt;p>Sure there are also the backup codes, which are given/shown whenever 2FA is
set up, and are intended to be used on a rainy day such as when your
phone dies, gets stolen, or simply wiped accidentally or even on purpose but
they just forgot about the 2FA codes living there (not speaking from personal
experience at all of course :cry: ). Unfortunately, many people don&amp;rsquo;t pay too
much attention to these, myself included.&lt;/p>
&lt;p>I &lt;strong>strongly encourage you to store those backup codes&lt;/strong> because you
never know when you&amp;rsquo;re going to need them. They have saved me in the past
from being able to access an account when my phone battery died, I had no
charger and needed to access it urgently.&lt;/p>
&lt;p>But in those cases where everything goes wrong, well you just have to reset
all accounts where you have 2FA, i.e: reset passwords and somehow prove that
you are who you say you are and not a malicious attacker that obtained the
passwords for those accounts (which is kind of a tricky situation for many
services since they don&amp;rsquo;t want to be accidentally victims of a social
engineering attack trying to collaborate with the so-claimed user).&lt;/p>
&lt;p>Hopefully this serves as enough warning and encouragement to backup your 2FA
or simply write down the backup codes. If you get anything out of this post,
let it be that.&lt;/p>
&lt;p>Now back to backing up the 2FA keys in Google Authenticator (GA) app: the main
advantage of this approach being that you don&amp;rsquo;t have to change/edit or add any
new device into any of your accounts, but instead you simply add the keys
manually to another 2FA app whether it lives in app in your phone, a desktop
app or somewhere else.&lt;/p>
&lt;p>You also don&amp;rsquo;t need to use any of your &lt;em>limited&lt;/em> backup codes in case you need
access and don&amp;rsquo;t have that one phone with all the 2FA keys at hand in that
moment.&lt;/p>
&lt;h1 id="prerequisites">Prerequisites&lt;/h1>
&lt;p>This guide assumes you have rooted your Android phone.&lt;/p>
&lt;p>If you don&amp;rsquo;t want to do this due to security concerns, then your only option
is to use the backup codes and that&amp;rsquo;s the end of this road for you.&lt;/p>
&lt;p>If you don&amp;rsquo;t mind rooting your phone, and you haven&amp;rsquo;t there are many ways of
doing so, a simple duckduckgo search will lead you down the rabbithole.&lt;/p>
&lt;p>In addition we will need
&lt;a href="https://developer.android.com/studio/command-line/adb">adb&lt;/a> adb i.e: android
debug bridge. This is part of
the &lt;code>android-tools&lt;/code> package in Arch Linux. You can also download and install
it as part of the platform-tools from the &lt;a href="https://developer.android.com/studio/releases/platform-tools">Android
website&lt;/a>&lt;/p>
&lt;p>This guide also assumes your phone is connected to the computer and you have
USB debugging enabled (For more detailed steps please check this &lt;a href="https://developer.android.com/studio/debug/dev-options">official
android guide&lt;/a>.&lt;/p>
&lt;h1 id="run-adb-as-root">Run adb as root&lt;/h1>
&lt;p>First of we need to run adb as root. This is easier said that done.&lt;/p>
&lt;p>For this we can run &lt;code>adb root&lt;/code> in a terminal, but it might be the case that after we do that
and try to fetch GA&amp;rsquo;s database we get the following error:&lt;/p>
&lt;pre>&lt;code>$ adb pull /data/data/com.google.android.apps.authenticator2/databases/databases
adb: error: failed to stat remote object '/data/data/com.google.android.apps.authenticator2/databases/databases': Permission denied
&lt;/code>&lt;/pre>&lt;pre>&lt;code>$ sudo adb shell
AndroidPhone:/ $ ls -lh
ls: ./init.rc: Permission denied
ls: ./init: Permission denied
ls: ./ueventd.rc: Permission denied
&lt;/code>&lt;/pre>&lt;p>You can also tell that the session is &lt;strong>not&lt;/strong> a root session because the
prompt ends with &lt;code>$&lt;/code> instead of &lt;code>#&lt;/code>.&lt;/p>
&lt;pre>&lt;code>$ adb root
adbd cannot run as root in production builds
&lt;/code>&lt;/pre>&lt;pre>&lt;code>$ adb shell &amp;quot;su&amp;quot;
Permission denied
&lt;/code>&lt;/pre>&lt;p>In my particular case, this is an issue caused of having Magisck Hide enabled,
mentioned in this &lt;a href="https://github.com/topjohnwu/Magisk/issues/425#issuecomment-409101558">Github
issue&lt;/a>.&lt;/p>
&lt;p>In case you&amp;rsquo;re wondering Magisck Hide is part of
&lt;a href="https://www.xda-developers.com/how-to-use-magisk/">Magisck&lt;/a> and is a feature
that &amp;ldquo;&lt;em>allows you put a cloaking device on root permissions for certain
apps.&lt;/em>&amp;rdquo;. Very useful for banking apps, for instance, which don&amp;rsquo;t allow you to
login on a rooted device.&lt;/p>
&lt;p>So I decided to disable Magisck Hide for now and reboot.&lt;/p>
&lt;p>Afterwards I was able to start an adb root session:&lt;/p>
&lt;pre>&lt;code>$ adb root
restarting adbd as root
timeout expired while waiting for device
&lt;/code>&lt;/pre>&lt;p>And then checking the prompt for the &lt;code>#&lt;/code> at the end.&lt;/p>
&lt;pre>&lt;code>$ adb shell
OnePlus3:/ # ls -lh
total 2.7M
dr-xr-xr-x 90 root root 0 1972-06-20 21:28 acct
lrwxrwxrwx 1 root root 11 1970-01-01 01:00 bin -&amp;gt; /system/bin
lrwxrwxrwx 1 root root 19 1970-01-01 01:00 bt_firmware -&amp;gt; /vendor/bt_firmware
lrwxrwxrwx 1 root root 50 1970-01-01 01:00 bugreports -&amp;gt; /data/user_de/0/com.android.shell/files/bugreports
&lt;/code>&lt;/pre>&lt;h1 id="fetching-the-database">Fetching the database&lt;/h1>
&lt;p>Afterwards I was able to pull the database, and I noticed that it hadn&amp;rsquo;t been
modified since many months ago, even though I had recently added new 2FA entries,
after trying to open it I only found a handful of 2FA keys, but I also noticed
something else.&lt;/p>
&lt;p>There were two additional files next to the &lt;code>database&lt;/code> file: a &lt;code>-wal&lt;/code> and a &lt;code>-shm&lt;/code> file.&lt;/p>
&lt;p>After some more duckduckgo searching I found a well written in a well written and
useful &lt;a href="https://medium.com/@Zredna/browsing-your-android-apps-database-3c67aa3f4a3c">Medium
post&lt;/a>
by &lt;a href="https://medium.com/@Zredna">@Zredna&lt;/a>, in which he explore sqlite
databases in android apps.&lt;/p>
&lt;p>In it he explains that the &lt;code>-wal&lt;/code> file, is used for the &lt;a href="https://en.wikipedia.org/wiki/Write-ahead_logging">write-ahead
logging&lt;/a>, which is a
technique for providing atomicity and durability in databases, part of the
&lt;a href="https://en.wikipedia.org/wiki/ACID">ACID properties&lt;/a>, and Wikipedia explains
that the technique relies on first writing the changes in the log &lt;strong>before&lt;/strong>
writing them in the database. Kind of the equivalent of journaling in filesystems.
In short the directory looked something like this:&lt;/p>
&lt;pre>&lt;code>OnePlus3:/data/data/com.google.android.apps.authenticator2/databases# ls -lh
total 2.7M
lrwxrwxrwx 1 root root 6K 1970-01-01 01:00 databases
lrwxrwxrwx 1 root root 80 1970-01-01 01:00 databases-shm
lrwxrwxrwx 1 root root 10K 1970-01-01 01:00 databases-wal
&lt;/code>&lt;/pre>&lt;p>As to the meaning of the &lt;code>-shm&lt;/code> file, that is a &lt;strong>shared-memory file&lt;/strong> and is
used by the sqlite databases when operating in WAL mode, used as an index of
the WAL file. You can read more about it the [sqlite tempfiles
documentation](here: &lt;a href="https://www.sqlite.org/tempfiles.html">https://www.sqlite.org/tempfiles.html&lt;/a>)&lt;/p>
&lt;p>So that required actually fetching both of those extra files in order to get a
complete picture of the current database state.&lt;/p>
&lt;h1 id="opening-the-database">Opening the database&lt;/h1>
&lt;p>As per the blog, we need to commit the changes from the &lt;code>wal&lt;/code> file to the
database file, in order to do that we run the command:&lt;/p>
&lt;pre>&lt;code>sqlite3 app.db &amp;quot;PRAGMA wal_checkpoint&amp;quot;
&lt;/code>&lt;/pre>&lt;p>Afterwards, we can open the database using an interactive sqlite session,
select all the entries from the &lt;code>account&lt;/code> table:&lt;/p>
&lt;pre>&lt;code>$ sqlite3 ./databases
SQLite version 3.31.1 2019-12-10 19:55:54
Enter &amp;quot;.help&amp;quot; for usage hints.
sqlite&amp;gt; select * from accounts;
&lt;/code>&lt;/pre>&lt;p>Or simply save all the values without an interactive session to another file:&lt;/p>
&lt;pre>&lt;code>sqlite3 databases 'select * from accounts' &amp;gt; 2fa_accounts
&lt;/code>&lt;/pre>&lt;p>Which will write a table representation that looks like this:&lt;/p>
&lt;pre>&lt;code>$ cat 2fa_accounts
1|Github|asdf12345asdf|0|0|0||Github
2|Twitch|deadbeef101010|0|0|0||Twitch
&lt;/code>&lt;/pre>&lt;p>And the 2FA private keys would be the &lt;strong>deadbeef101010&lt;/strong> and the
&lt;strong>asdf12345asdf&lt;/strong> in this case, which you can then now use in case you move to
a different phone.&lt;/p>
&lt;p>That&amp;rsquo;s it! Hope that helps you in some way!&lt;/p>
&lt;p>PS: These are &lt;strong>not real 2FA private keys&lt;/strong> in case you&amp;rsquo;re wondering, potential hacker.&lt;/p>
- https://www.antoniojgutierrez.com/posts/2019-12-15-backing_up_google_authenticator_keys/ - Antonio Gutierrez 2015-2021. CC-BY-NC 4.0</description></item><item><title>Using a credential store for DockerHub login</title><link>https://www.antoniojgutierrez.com/posts/2018-08-11-docker_login_password_store/</link><pubDate>Sat, 11 Aug 2018 00:00:00 +0000</pubDate><guid>https://www.antoniojgutierrez.com/posts/2018-08-11-docker_login_password_store/</guid><description>Murmurations of Neurons https://www.antoniojgutierrez.com/posts/2018-08-11-docker_login_password_store/ -&lt;p>Whenever there&amp;rsquo;s a need to push images (public or private) or pull images from
privates repositories from DockerHub you need to login first. With the docker
client CLI that&amp;rsquo;s achieved with:&lt;/p>
&lt;pre>&lt;code>docker login
&lt;/code>&lt;/pre>&lt;p>It then asks for the credentials to use for logging in.
The problem with this approach is explicitly mentioned in output of that
command.&lt;/p>
&lt;p>In my case:&lt;/p>
&lt;pre>&lt;code>Login with your Docker ID to push and pull images from Docker Hub. If you don't have a Docker ID, head over to https://hub.docker.com to create one.
Username: chibby0ne
Password:
WARNING! Your password will be stored unencrypted in /home/turing/.docker/config.json.
Configure a credential helper to remove this warning. See
https://docs.docker.com/engine/reference/commandline/login/#credentials-store
&lt;/code>&lt;/pre>&lt;p>The password is stored unencrypted (although not in plain-text).&lt;/p>
&lt;p>Visiting the link you will find there are a number of docker-credentials
helpers in &lt;a href="https://github.com/docker/docker-credential-helpers">docker-credentials-helpers&lt;/a> for every Operating
System.&lt;/p>
&lt;p>For Linux, I decided to go with &lt;a href="https://www.passwordstore.org/">pass&lt;/a> and use the appropriate
docker-credential-helper for it.&lt;/p>
&lt;p>Pass is a password store that keeps passwords in a GPG encrypted file.&lt;/p>
&lt;p>The steps to set it up are very straightforward:&lt;/p>
&lt;ol>
&lt;li>
&lt;p>Install &lt;code>pass&lt;/code>&lt;/p>
&lt;p>Install &lt;code>pass&lt;/code> using your package manager if its available, otherwise download
a release and install it using &lt;code>make install&lt;/code>&lt;/p>
&lt;p>You can find all the options in the official website: &lt;a href="https://www.passwordstore.org/">pass&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Install &lt;code>docker-credential-pass&lt;/code>&lt;/p>
&lt;p>You need a Go installation to build the binaries. If you don&amp;rsquo;t have one yet
just install it using your package manager, and set the &lt;code>GOPATH&lt;/code> environment
variable to the place where you want to have your go projects. For more
information visit:&lt;/p>
&lt;p>Assuming you have a Go installation then:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>Fetch the sources with:&lt;/p>
&lt;pre>&lt;code>go get github.com/docker/docker-credential-helpers
&lt;/code>&lt;/pre>&lt;p>This will download the repo and place it in
&lt;code>$GOPATH/src/github.com/docker/docker-credential-helpers&lt;/code>.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Build the helper that uses pass by running:&lt;/p>
&lt;pre>&lt;code>make pass
&lt;/code>&lt;/pre>&lt;p>The binary &lt;code>docker-credential-pass&lt;/code> will be located in the &lt;code>bin/&lt;/code> directory.
You need to copy the binary to a directory included in the &lt;code>PATH&lt;/code> environment so
that the docker client CLI can actually find it.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>Log out&lt;/p>
&lt;p>Run &lt;code>docker logout&lt;/code>.&lt;/p>
&lt;p>If you where already logged in you should see:&lt;/p>
&lt;pre>&lt;code>Removing login credentials for https://index.docker.io/v1/
&lt;/code>&lt;/pre>&lt;p>If you where not logged in, you should see:&lt;/p>
&lt;pre>&lt;code>Not logged in to https://index.docker.io/v1/
&lt;/code>&lt;/pre>&lt;/li>
&lt;li>
&lt;p>Modify the &lt;code>~/.docker/config.json&lt;/code> to use the &lt;code>docker-credential-pass&lt;/code>&lt;/p>
&lt;p>Add the following key/value pair:&lt;/p>
&lt;pre>&lt;code> &amp;quot;credsStore&amp;quot;: &amp;quot;pass&amp;quot;
&lt;/code>&lt;/pre>&lt;p>By now your &lt;code>~/.docker/config.json&lt;/code> should look something like this
(User-Agent might be different):&lt;/p>
&lt;pre>&lt;code>{
&amp;quot;auths&amp;quot;: {},
&amp;quot;HttpHeaders&amp;quot;: {
&amp;quot;User-Agent&amp;quot;: &amp;quot;Docker-Client/18.05.0-ce (linux)&amp;quot;
},
&amp;quot;credsStore&amp;quot;: &amp;quot;pass&amp;quot;
}
&lt;/code>&lt;/pre>&lt;/li>
&lt;li>
&lt;p>Initialize &lt;code>pass&lt;/code>&lt;/p>
&lt;p>You need to tell pass which GPG keypair you&amp;rsquo;re going to use to encrypt/decrypt
the password.&lt;/p>
&lt;p>Run:&lt;/p>
&lt;pre>&lt;code>pass init GPG_ID
&lt;/code>&lt;/pre>&lt;p>Where GPG_ID is the fingerprint or email address that identifies the key.&lt;/p>
&lt;p>If you don&amp;rsquo;t have a GPG keypair yet, then proceed to create it using:
&lt;code>gpg --full-gen-key&lt;/code> and configure the settings using the interactive prompt.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Login&lt;/p>
&lt;p>Run &lt;code>docker login&lt;/code> and enter your credentials, but this time after entering
the username and password, you should see a prompt to enter the password for
the selected GPG key.&lt;/p>
&lt;p>Important to note is that the output should not have the warning message
anymore.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Done!&lt;/p>
&lt;p>That&amp;rsquo;s it. Now the you are logged in but the credentials are not stored
unencrypted in the &lt;code>~/.docker/config.json&lt;/code> file.&lt;/p>
&lt;/li>
&lt;/ol>
- https://www.antoniojgutierrez.com/posts/2018-08-11-docker_login_password_store/ - Antonio Gutierrez 2015-2021. CC-BY-NC 4.0</description></item></channel></rss>